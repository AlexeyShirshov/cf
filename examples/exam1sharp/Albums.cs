//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This file was generated by OrmCodeGen v1.0.2692.25639 application(OrmCodeGenLib v1.0.2692.25639).
//
//By user 'alex' at 16.05.2007 16:34:18.
//
//
namespace test
{
	using System;
	using System.Collections.Generic;
	using Worm.Entities;
    using Worm.Entities.Meta;
    using Worm.Cache;
    using Worm;
	
	
	[EntityAttribute(typeof(test.Albums.AlbumsSchemaDef), "1", EntityName="Albums")]
	public class Albums : KeyEntity
	{
		
		#region Private Fields
		private int _id;
		
		private string _name;
		
		private System.Nullable<System.DateTime> _release;
		#endregion
		
		#region Constructors
		public Albums()
		{
		}
		
		public Albums(int id, CacheBase cache, ObjectMappingEngine schema)				
		{
            base.Init(id, cache, schema);
		}
		#endregion
		
		#region Description Properties
        [EntityProperty(Field2DbRelations.PK, PropertyAlias = "ID")]
		public virtual int Id
		{
			get
			{
				System.IDisposable syncHelper;
				syncHelper = null;
				try
				{
					syncHelper = this.SyncHelper(true, "ID");
					return this._id;
				}
				finally
				{
					if ((syncHelper != null))
					{
						((System.IDisposable)(syncHelper)).Dispose();
					}
				}
			}
			set
			{
				System.IDisposable syncHelper;
				syncHelper = null;
				try
				{
					syncHelper = this.SyncHelper(false, "ID");
					this._id = value;
				}
				finally
				{
					if ((syncHelper != null))
					{
						((System.IDisposable)(syncHelper)).Dispose();
					}
				}
			}
		}
		
		[EntityProperty(PropertyAlias="Name")]
		public virtual string Name
		{
			get
			{
				System.IDisposable syncHelper;
				syncHelper = null;
				try
				{
					syncHelper = this.SyncHelper(true, "Name");
					return this._name;
				}
				finally
				{
					if ((syncHelper != null))
					{
						((System.IDisposable)(syncHelper)).Dispose();
					}
				}
			}
			set
			{
				System.IDisposable syncHelper;
				syncHelper = null;
				try
				{
					syncHelper = this.SyncHelper(false, "Name");
					this._name = value;
				}
				finally
				{
					if ((syncHelper != null))
					{
						((System.IDisposable)(syncHelper)).Dispose();
					}
				}
			}
		}
		
		[EntityProperty(PropertyAlias="Release")]
		public virtual System.Nullable<System.DateTime> Release
		{
			get
			{
				System.IDisposable syncHelper;
				syncHelper = null;
				try
				{
					syncHelper = this.SyncHelper(true, "Release");
					return this._release;
				}
				finally
				{
					if ((syncHelper != null))
					{
						((System.IDisposable)(syncHelper)).Dispose();
					}
				}
			}
			set
			{
				System.IDisposable syncHelper;
				syncHelper = null;
				try
				{
					syncHelper = this.SyncHelper(false, "Release");
					this._release = value;
				}
				finally
				{
					if ((syncHelper != null))
					{
						((System.IDisposable)(syncHelper)).Dispose();
					}
				}
			}
		}
		#endregion
		
		#region Static members
		/// <summary>
		///Метод копирует (потоко-небезопасно) значения полей одного объекта в другой
		///</summary>
		protected static void CopyAlbums(test.Albums from, test.Albums to)
		{
			to._id = from._id;
			to._name = from._name;
			to._release = from._release;
		}
		#endregion

        public override object Identifier
        {
            get
            {
                return _id;
            }
            set
            {
                _id = (int)value;
            }
        }
        protected override void CopyProperties(Worm.Entities._IEntity from, Worm.Entities._IEntity to, Worm.OrmManager mgr, Worm.Entities.Meta.IEntitySchema oschema)
		{
			test.Albums.CopyAlbums(((test.Albums)(from)), ((test.Albums)(to)));
		}
		
        public virtual void SetValueOptimized(string propertyAlias, Worm.Entities.Meta.IEntitySchema schema, object value)
		{
			if ((propertyAlias == "ID"))
			{
				this._id = ((int)(value));
				return;
			}
            if ((propertyAlias == "Name"))
			{
				this._name = ((string)(value));
				return;
			}
            if ((propertyAlias == "Release"))
			{
				this._release = ((System.Nullable<System.DateTime>)(value));
				return;
			}
		}
		
		#region Nested Types
        public class AlbumsSchemaDef : IEntitySchema, ISchemaInit
		{
			
			#region Private Fields
			private OrmObjectIndex _idx;
			
			private SourceFragment _table = new SourceFragment("dbo","Albums");
			
			private object _forTablesLock = new object();
			
			private M2MRelation[] _m2mRelations;
			
			private object _forM2MRelationsLock = new object();
			
			private object _forIdxLock = new object();
			
			protected ObjectMappingEngine _schema;
			
			protected System.Type _entityType;
			#endregion
			
			#region Base type related members

            public virtual SourceFragment Table
			{
                get
                {
                    return _table;
                }
			}
			
			public virtual Worm.Collections.IndexedCollection<string, MapField2Column> GetFieldColumnMap()
			{
				if ((this._idx == null))
				{
					object lockCachedExpression_cb678295f99047a9ba18312d4ed9968b = this._forIdxLock;
					System.Threading.Monitor.Enter(lockCachedExpression_cb678295f99047a9ba18312d4ed9968b);
					try
					{
						if ((this._idx == null))
						{
							OrmObjectIndex idx = new OrmObjectIndex();
							idx.Add(new MapField2Column("ID", "id", Table));
                            idx.Add(new MapField2Column("Name", "name", Table));
                            idx.Add(new MapField2Column("Release", "release_dt", Table));
							this._idx = idx;
						}
					}
					finally
					{
						System.Threading.Monitor.Exit(lockCachedExpression_cb678295f99047a9ba18312d4ed9968b);
					}
				}
				return this._idx;
			}
			#endregion
			
			public virtual void GetSchema(ObjectMappingEngine schema, System.Type t)
			{
				this._schema = schema;
				this._entityType = t;
			}
			
			#region Nested Types
			public enum TablesLink
			{
				
				#region Private Fields
				tbldboAlbums = 0,
				#endregion
			}
			#endregion
		}
		#endregion
	}
}
