//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Worm.Designer
{
	/// <summary>
	/// DomainClass WormModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Worm.Designer.WormModel.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Worm.Designer.WormModel.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2d55930a-31b5-4bd4-9a68-1bdec0d265fe")]
	public partial class WormModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// WormModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2d55930a, 0x31b5, 0x4bd4, 0x9a, 0x68, 0x1b, 0xde, 0xc0, 0xd2, 0x65, 0xfe);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public WormModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public WormModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DefaultNamespace domain property code
		
		/// <summary>
		/// DefaultNamespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultNamespaceDomainPropertyId = new global::System.Guid(0xef57328f, 0xfa14, 0x4ae6, 0xb1, 0xb5, 0x66, 0xee, 0xfd, 0x00, 0xff, 0x48);
		
		/// <summary>
		/// Storage for DefaultNamespace
		/// </summary>
		private global::System.String defaultNamespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DefaultNamespace domain property.
		/// Default namespace used in case entity has no any namespace specified
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.WormModel/DefaultNamespace.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.WormModel/DefaultNamespace.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ef57328f-fa14-4ae6-b1b5-66eefd00ff48")]
		public global::System.String DefaultNamespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultNamespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultNamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the WormModel.DefaultNamespace domain property.
		/// </summary>
		internal sealed partial class DefaultNamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<WormModel, global::System.String>
		{
			private DefaultNamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the WormModel.DefaultNamespace domain property value handler.
			/// </summary>
			public static readonly DefaultNamespacePropertyHandler Instance = new DefaultNamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the WormModel.DefaultNamespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultNamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(WormModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.defaultNamespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(WormModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultNamespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SchemaVersion domain property code
		
		/// <summary>
		/// SchemaVersion domain property Id.
		/// </summary>
		public static readonly global::System.Guid SchemaVersionDomainPropertyId = new global::System.Guid(0xbd1e5b90, 0xb0b3, 0x4647, 0xa0, 0x44, 0xf4, 0xf4, 0x59, 0x24, 0x18, 0x72);
		
		/// <summary>
		/// Storage for SchemaVersion
		/// </summary>
		private global::System.String schemaVersionPropertyStorage = "1";
		
		/// <summary>
		/// Gets or sets the value of SchemaVersion domain property.
		/// Schema Version
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.WormModel/SchemaVersion.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.WormModel/SchemaVersion.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("1")]
		[DslModeling::DomainObjectId("bd1e5b90-b0b3-4647-a044-f4f459241872")]
		public global::System.String SchemaVersion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return schemaVersionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SchemaVersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the WormModel.SchemaVersion domain property.
		/// </summary>
		internal sealed partial class SchemaVersionPropertyHandler : DslModeling::DomainPropertyValueHandler<WormModel, global::System.String>
		{
			private SchemaVersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the WormModel.SchemaVersion domain property value handler.
			/// </summary>
			public static readonly SchemaVersionPropertyHandler Instance = new SchemaVersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the WormModel.SchemaVersion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SchemaVersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(WormModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.schemaVersionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(WormModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.schemaVersionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Entities opposite domain role accessor
		/// <summary>
		/// Gets a list of Entities.
		/// Description for Worm.Designer.WormModelHasEntities.WormModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> Entities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Entity>(this, global::Worm.Designer.WormModelHasEntities.WormModelDomainRoleId);
			}
		}
		#endregion
		#region Tables opposite domain role accessor
		/// <summary>
		/// Gets a list of Tables.
		/// Description for Worm.Designer.WormModelHasTables.WormModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Table> Tables
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Table>(this, global::Worm.Designer.WormModelHasTables.WormModelDomainRoleId);
			}
		}
		#endregion
		#region Types opposite domain role accessor
		/// <summary>
		/// Gets a list of Types.
		/// Description for Worm.Designer.WormModelHasTypes.WormModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<WormType> Types
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<WormType>(this, global::Worm.Designer.WormModelHasTypes.WormModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Worm.Designer.WormType.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Worm.Designer.Table.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Worm.Designer.Entity.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Worm.Designer.WormType sourceWormType1 = sourceElement as global::Worm.Designer.WormType;
			if (sourceWormType1 != null)
			{
				// Create link for path WormModelHasTypes.Types
				this.Types.Add(sourceWormType1);

				return;
			}
				
			global::Worm.Designer.Table sourceTable2 = sourceElement as global::Worm.Designer.Table;
			if (sourceTable2 != null)
			{
				// Create link for path WormModelHasTables.Tables
				this.Tables.Add(sourceTable2);

				return;
			}
				
			global::Worm.Designer.Entity sourceEntity3 = sourceElement as global::Worm.Designer.Entity;
			if (sourceEntity3 != null)
			{
				// Create link for path WormModelHasEntities.Entities
				this.Entities.Add(sourceEntity3);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Worm.Designer.WormType sourceWormType1 = sourceElement as global::Worm.Designer.WormType;
			if (sourceWormType1 != null)
			{
				// Delete link for path WormModelHasTypes.Types
				
				foreach (DslModeling::ElementLink link in global::Worm.Designer.WormModelHasTypes.GetLinks((global::Worm.Designer.WormModel)this, sourceWormType1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Worm.Designer.WormModelHasTypes.WormModelDomainRoleId, global::Worm.Designer.WormModelHasTypes.WormTypeDomainRoleId);
				}

				return;
			}
				
			global::Worm.Designer.Table sourceTable2 = sourceElement as global::Worm.Designer.Table;
			if (sourceTable2 != null)
			{
				// Delete link for path WormModelHasTables.Tables
				
				foreach (DslModeling::ElementLink link in global::Worm.Designer.WormModelHasTables.GetLinks((global::Worm.Designer.WormModel)this, sourceTable2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Worm.Designer.WormModelHasTables.WormModelDomainRoleId, global::Worm.Designer.WormModelHasTables.TableDomainRoleId);
				}

				return;
			}
				
			global::Worm.Designer.Entity sourceEntity3 = sourceElement as global::Worm.Designer.Entity;
			if (sourceEntity3 != null)
			{
				// Delete link for path WormModelHasEntities.Entities
				
				foreach (DslModeling::ElementLink link in global::Worm.Designer.WormModelHasEntities.GetLinks((global::Worm.Designer.WormModel)this, sourceEntity3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Worm.Designer.WormModelHasEntities.WormModelDomainRoleId, global::Worm.Designer.WormModelHasEntities.EntityDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Worm.Designer
{
	/// <summary>
	/// DomainClass Entity
	/// Сущность
	/// </summary>
	[DslDesign::DisplayNameResource("Worm.Designer.Entity.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Worm.Designer.Entity.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("4fd18942-120e-481b-9834-7c4d652242e1")]
	public partial class Entity : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Entity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4fd18942, 0x120e, 0x481b, 0x98, 0x34, 0x7c, 0x4d, 0x65, 0x22, 0x42, 0xe1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Entity(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Entity(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IdProperty domain property code
		
		/// <summary>
		/// IdProperty domain property Id.
		/// </summary>
		public static readonly global::System.Guid IdPropertyDomainPropertyId = new global::System.Guid(0x44616f38, 0x82f8, 0x43e3, 0xbd, 0xe6, 0xd5, 0x5d, 0x7e, 0x11, 0xe1, 0x89);
		
		/// <summary>
		/// Gets or sets the value of IdProperty domain property.
		/// Идентификатор сущности
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.Entity/IdProperty.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Entity/IdProperty.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("entity id")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("44616f38-82f8-43e3-bde6-d55d7e11e189")]
		public global::System.String IdProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IdPropertyPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the Entity.IdProperty domain property.
		/// </summary>
		internal sealed partial class IdPropertyPropertyHandler : DslModeling::CalculatedPropertyValueHandler<Entity, global::System.String>
		{
			private IdPropertyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.IdProperty domain property value handler.
			/// </summary>
			public static readonly IdPropertyPropertyHandler Instance = new IdPropertyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.IdProperty domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IdPropertyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IdProperty because its Kind is
				// set to Calculated. Please provide the GetIdPropertyValue()
				// method on the domain class.
				return element.GetIdPropertyValue();
			}
		
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xa07738d3, 0xb31e, 0x4ae8, 0xbd, 0xdd, 0x0d, 0xe2, 0x5a, 0xe5, 0xa4, 0x20);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "Entity";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Наименование сущности
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.Entity/Name.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Entity/Name.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Entity")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("a07738d3-b31e-4ae8-bddd-0de25ae5a420")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0xc0abea7d, 0x0b57, 0x4ddb, 0x80, 0x6f, 0x1e, 0x0f, 0xdf, 0x96, 0xbb, 0x39);
		
		/// <summary>
		/// Storage for Namespace
		/// </summary>
		private global::System.String namespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// Пространство имен для сущности
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.Entity/Namespace.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Entity/Namespace.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c0abea7d-0b57-4ddb-806f-1e0fdf96bb39")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Behaviour domain property code
		
		/// <summary>
		/// Behaviour domain property Id.
		/// </summary>
		public static readonly global::System.Guid BehaviourDomainPropertyId = new global::System.Guid(0x41ea2ab0, 0x0bd7, 0x4116, 0x82, 0xa4, 0x63, 0xa0, 0xa3, 0x86, 0xac, 0xe4);
		
		/// <summary>
		/// Storage for Behaviour
		/// </summary>
		private global::Worm.CodeGen.Core.EntityBehaviuor behaviourPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::Worm.CodeGen.Core.EntityBehaviuor>("Default");
		
		/// <summary>
		/// Gets or sets the value of Behaviour domain property.
		/// Entity generator behaviour
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.Entity/Behaviour.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Entity/Behaviour.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(typeof(global::Worm.CodeGen.Core.EntityBehaviuor), "Default")]
		[DslModeling::DomainObjectId("41ea2ab0-0bd7-4116-82a4-63a0a386ace4")]
		public global::Worm.CodeGen.Core.EntityBehaviuor Behaviour
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return behaviourPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				BehaviourPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.Behaviour domain property.
		/// </summary>
		internal sealed partial class BehaviourPropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::Worm.CodeGen.Core.EntityBehaviuor>
		{
			private BehaviourPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.Behaviour domain property value handler.
			/// </summary>
			public static readonly BehaviourPropertyHandler Instance = new BehaviourPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.Behaviour domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BehaviourDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Worm.CodeGen.Core.EntityBehaviuor GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.behaviourPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::Worm.CodeGen.Core.EntityBehaviuor newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Worm.CodeGen.Core.EntityBehaviuor oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.behaviourPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xb7e0a887, 0x5470, 0x48c5, 0x86, 0x38, 0x55, 0x4d, 0xf5, 0x31, 0x80, 0x14);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Описание сущности
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.Entity/Description.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Entity/Description.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b7e0a887-5470-48c5-8638-554df5318014")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region UseGenerics domain property code
		
		/// <summary>
		/// UseGenerics domain property Id.
		/// </summary>
		public static readonly global::System.Guid UseGenericsDomainPropertyId = new global::System.Guid(0xfee6dfaf, 0x50e0, 0x4a7a, 0x86, 0x4d, 0x90, 0xe3, 0x49, 0x7b, 0x52, 0x46);
		
		/// <summary>
		/// Storage for UseGenerics
		/// </summary>
		private global::System.Boolean useGenericsPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of UseGenerics domain property.
		/// Определяет генерировать generic или строго типизированные методы
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.Entity/UseGenerics.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Entity/UseGenerics.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fee6dfaf-50e0-4a7a-864d-90e3497b5246")]
		public global::System.Boolean UseGenerics
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return useGenericsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UseGenericsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.UseGenerics domain property.
		/// </summary>
		internal sealed partial class UseGenericsPropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::System.Boolean>
		{
			private UseGenericsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.UseGenerics domain property value handler.
			/// </summary>
			public static readonly UseGenericsPropertyHandler Instance = new UseGenericsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.UseGenerics domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UseGenericsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.useGenericsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.useGenericsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MakeInterface domain property code
		
		/// <summary>
		/// MakeInterface domain property Id.
		/// </summary>
		public static readonly global::System.Guid MakeInterfaceDomainPropertyId = new global::System.Guid(0xe3b3d3c8, 0x0ff2, 0x48d5, 0x94, 0x60, 0xc0, 0x87, 0xe8, 0x1f, 0x05, 0x1a);
		
		/// <summary>
		/// Storage for MakeInterface
		/// </summary>
		private global::System.Boolean makeInterfacePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of MakeInterface domain property.
		/// Определяет генерировать интерфейс для сущности
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.Entity/MakeInterface.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Entity/MakeInterface.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e3b3d3c8-0ff2-48d5-9460-c087e81f051a")]
		public global::System.Boolean MakeInterface
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return makeInterfacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MakeInterfacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.MakeInterface domain property.
		/// </summary>
		internal sealed partial class MakeInterfacePropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::System.Boolean>
		{
			private MakeInterfacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.MakeInterface domain property value handler.
			/// </summary>
			public static readonly MakeInterfacePropertyHandler Instance = new MakeInterfacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.MakeInterface domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MakeInterfaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.makeInterfacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.makeInterfacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region BaseEntity domain property code
		
		/// <summary>
		/// BaseEntity domain property Id.
		/// </summary>
		public static readonly global::System.Guid BaseEntityDomainPropertyId = new global::System.Guid(0x24a9a6f7, 0x5964, 0x44fd, 0x95, 0x47, 0x5b, 0x9e, 0xc4, 0xe2, 0x5d, 0xa9);
		
		/// <summary>
		/// Storage for BaseEntity
		/// </summary>
		private global::System.String baseEntityPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of BaseEntity domain property.
		/// ИД базовой сущности
		/// </summary>
		[System.ComponentModel.Editor(typeof(Worm.Designer.BaseEntityUIEditor), typeof(System.Drawing.Design.UITypeEditor) )]
		[DslDesign::DisplayNameResource("Worm.Designer.Entity/BaseEntity.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Entity/BaseEntity.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("24a9a6f7-5964-44fd-9547-5b9ec4e25da9")]
		public global::System.String BaseEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return baseEntityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				BaseEntityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.BaseEntity domain property.
		/// </summary>
		internal sealed partial class BaseEntityPropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::System.String>
		{
			private BaseEntityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.BaseEntity domain property value handler.
			/// </summary>
			public static readonly BaseEntityPropertyHandler Instance = new BaseEntityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.BaseEntity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BaseEntityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.baseEntityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.baseEntityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region WormModel opposite domain role accessor
		/// <summary>
		/// Gets or sets WormModel.
		/// Description for Worm.Designer.WormModelHasEntities.Entity
		/// </summary>
		public virtual WormModel WormModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Worm.Designer.WormModelHasEntities.EntityDomainRoleId) as WormModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Worm.Designer.WormModelHasEntities.EntityDomainRoleId, value);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		/// <summary>
		/// Gets a list of Properties.
		/// Description for Worm.Designer.EntityHasProperties.Entity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Property>(this, global::Worm.Designer.EntityHasProperties.EntityDomainRoleId);
			}
		}
		#endregion
		#region TargetEntities opposite domain role accessor
		/// <summary>
		/// Gets a list of TargetEntities.
		/// Description for Worm.Designer.EntityReferencesTargetEntities.SourceEntity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> TargetEntities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Entity>(this, global::Worm.Designer.EntityReferencesTargetEntities.SourceEntityDomainRoleId);
			}
		}
		#endregion
		#region SourceEntities opposite domain role accessor
		/// <summary>
		/// Gets a list of SourceEntities.
		/// Description for Worm.Designer.EntityReferencesTargetEntities.TargetEntity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> SourceEntities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Entity>(this, global::Worm.Designer.EntityReferencesTargetEntities.TargetEntityDomainRoleId);
			}
		}
		#endregion
		#region SupressedProperties opposite domain role accessor
		/// <summary>
		/// Gets a list of SupressedProperties.
		/// Description for Worm.Designer.EntityHasSupressedProperties.Entity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SupressedProperty> SupressedProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<SupressedProperty>(this, global::Worm.Designer.EntityHasSupressedProperties.EntityDomainRoleId);
			}
		}
		#endregion
		#region SelfRelations opposite domain role accessor
		/// <summary>
		/// Gets a list of SelfRelations.
		/// Description for Worm.Designer.EntityHasSelfRelations.Entity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SelfRelation> SelfRelations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<SelfRelation>(this, global::Worm.Designer.EntityHasSelfRelations.EntityDomainRoleId);
			}
		}
		#endregion
		#region Tables opposite domain role accessor
		/// <summary>
		/// Gets a list of Tables.
		/// Description for Worm.Designer.TableReferencesEntity.Entity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Table> Tables
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Table>(this, global::Worm.Designer.TableReferencesEntity.EntityDomainRoleId);
			}
		}
		#endregion
		#region WormTypes opposite domain role accessor
		/// <summary>
		/// Gets a list of WormTypes.
		/// Description for Worm.Designer.WormTypeReferencesEntities.Entity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<WormType> WormTypes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<WormType>(this, global::Worm.Designer.WormTypeReferencesEntities.EntityDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Worm.Designer.SelfRelation.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Worm.Designer.Table.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Worm.Designer.Property.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Worm.Designer.SupressedProperty.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Worm.Designer.SelfRelation sourceSelfRelation1 = sourceElement as global::Worm.Designer.SelfRelation;
			if (sourceSelfRelation1 != null)
			{
				// Create link for path EntityHasSelfRelations.SelfRelations
				this.SelfRelations.Add(sourceSelfRelation1);

				return;
			}
				
			global::Worm.Designer.Table sourceTable2 = sourceElement as global::Worm.Designer.Table;
			if (sourceTable2 != null)
			{
				// Create link for path TableReferencesEntity.Tables
				this.Tables.Add(sourceTable2);

				// Create link for path WormModelHasEntities.WormModel/!WormModel/WormModelHasTables.Tables
						// Segments 0 and 1
						global::Worm.Designer.WormModel tableHost1 = this.WormModel;
						if ( tableHost1 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'WormModelHasEntities.WormModel/!WormModel/WormModelHasTables.Tables'.");
				tableHost1.Tables.Add(sourceTable2);

				return;
			}
				
			global::Worm.Designer.Property sourceProperty3 = sourceElement as global::Worm.Designer.Property;
			if (sourceProperty3 != null)
			{
				// Create link for path EntityHasProperties.Properties
				this.Properties.Add(sourceProperty3);

				return;
			}
				
			global::Worm.Designer.SupressedProperty sourceSupressedProperty4 = sourceElement as global::Worm.Designer.SupressedProperty;
			if (sourceSupressedProperty4 != null)
			{
				// Create link for path EntityHasSupressedProperties.SupressedProperties
				this.SupressedProperties.Add(sourceSupressedProperty4);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Worm.Designer.SelfRelation sourceSelfRelation1 = sourceElement as global::Worm.Designer.SelfRelation;
			if (sourceSelfRelation1 != null)
			{
				// Delete link for path EntityHasSelfRelations.SelfRelations
				
				foreach (DslModeling::ElementLink link in global::Worm.Designer.EntityHasSelfRelations.GetLinks((global::Worm.Designer.Entity)this, sourceSelfRelation1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Worm.Designer.EntityHasSelfRelations.EntityDomainRoleId, global::Worm.Designer.EntityHasSelfRelations.SelfRelationDomainRoleId);
				}

				return;
			}
				
			global::Worm.Designer.Table sourceTable2 = sourceElement as global::Worm.Designer.Table;
			if (sourceTable2 != null)
			{
				// Delete link for path TableReferencesEntity.Tables
				
				foreach (DslModeling::ElementLink link in global::Worm.Designer.TableReferencesEntity.GetLinks(sourceTable2, (global::Worm.Designer.Entity)this))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Worm.Designer.TableReferencesEntity.EntityDomainRoleId, global::Worm.Designer.TableReferencesEntity.TableDomainRoleId);
				}

				// Delete link for path WormModelHasEntities.WormModel/!WormModel/WormModelHasTables.Tables
					// Segments 0 and 1
					global::Worm.Designer.WormModel tableHost1 = this.WormModel;
					if ( tableHost1 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'WormModelHasEntities.WormModel/!WormModel/WormModelHasTables.Tables'.");
				
				foreach (DslModeling::ElementLink link in global::Worm.Designer.WormModelHasTables.GetLinks((global::Worm.Designer.WormModel)tableHost1, sourceTable2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Worm.Designer.WormModelHasTables.WormModelDomainRoleId, global::Worm.Designer.WormModelHasTables.TableDomainRoleId);
				}

				return;
			}
				
			global::Worm.Designer.Property sourceProperty3 = sourceElement as global::Worm.Designer.Property;
			if (sourceProperty3 != null)
			{
				// Delete link for path EntityHasProperties.Properties
				
				foreach (DslModeling::ElementLink link in global::Worm.Designer.EntityHasProperties.GetLinks((global::Worm.Designer.Entity)this, sourceProperty3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Worm.Designer.EntityHasProperties.EntityDomainRoleId, global::Worm.Designer.EntityHasProperties.PropertyDomainRoleId);
				}

				return;
			}
				
			global::Worm.Designer.SupressedProperty sourceSupressedProperty4 = sourceElement as global::Worm.Designer.SupressedProperty;
			if (sourceSupressedProperty4 != null)
			{
				// Delete link for path EntityHasSupressedProperties.SupressedProperties
				
				foreach (DslModeling::ElementLink link in global::Worm.Designer.EntityHasSupressedProperties.GetLinks((global::Worm.Designer.Entity)this, sourceSupressedProperty4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Worm.Designer.EntityHasSupressedProperties.EntityDomainRoleId, global::Worm.Designer.EntityHasSupressedProperties.SupressedPropertyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Worm.Designer
{
	/// <summary>
	/// DomainClass Table
	/// Tаблицa БД
	/// </summary>
	[DslDesign::DisplayNameResource("Worm.Designer.Table.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Worm.Designer.Table.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("d8167da3-fa3f-4ed4-8a42-1e613b5f9902")]
	public partial class Table : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Table domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd8167da3, 0xfa3f, 0x4ed4, 0x8a, 0x42, 0x1e, 0x61, 0x3b, 0x5f, 0x99, 0x02);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Table(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Table(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xa17a80a3, 0xb19c, 0x4719, 0x81, 0xd0, 0x60, 0x15, 0xbe, 0x74, 0x21, 0x7d);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Имя таблицы
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.Table/Name.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Table/Name.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("a17a80a3-b19c-4719-81d0-6015be74217d")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Table.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Table, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Table.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Table.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Table element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Table element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IdProperty domain property code
		
		/// <summary>
		/// IdProperty domain property Id.
		/// </summary>
		public static readonly global::System.Guid IdPropertyDomainPropertyId = new global::System.Guid(0x1be4d74c, 0xedb8, 0x4f30, 0xa2, 0x9a, 0xfc, 0xd3, 0xe0, 0xf8, 0xba, 0xf7);
		
		/// <summary>
		/// Gets or sets the value of IdProperty domain property.
		/// Description for Worm.Designer.Table.Id
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.Table/IdProperty.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Table/IdProperty.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("1be4d74c-edb8-4f30-a29a-fcd3e0f8baf7")]
		public global::System.String IdProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IdPropertyPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the Table.IdProperty domain property.
		/// </summary>
		internal sealed partial class IdPropertyPropertyHandler : DslModeling::CalculatedPropertyValueHandler<Table, global::System.String>
		{
			private IdPropertyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Table.IdProperty domain property value handler.
			/// </summary>
			public static readonly IdPropertyPropertyHandler Instance = new IdPropertyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Table.IdProperty domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IdPropertyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Table element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IdProperty because its Kind is
				// set to Calculated. Please provide the GetIdPropertyValue()
				// method on the domain class.
				return element.GetIdPropertyValue();
			}
		
		}
		
		#endregion
		#region Schema domain property code
		
		/// <summary>
		/// Schema domain property Id.
		/// </summary>
		public static readonly global::System.Guid SchemaDomainPropertyId = new global::System.Guid(0xcca3b40b, 0xcd96, 0x4448, 0xa2, 0x0c, 0x30, 0xc6, 0xe8, 0x59, 0x22, 0x09);
		
		/// <summary>
		/// Storage for Schema
		/// </summary>
		private global::System.String schemaPropertyStorage = "dbo";
		
		/// <summary>
		/// Gets or sets the value of Schema domain property.
		/// Schema name for table
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.Table/Schema.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Table/Schema.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("dbo")]
		[DslModeling::DomainObjectId("cca3b40b-cd96-4448-a20c-30c6e8592209")]
		public global::System.String Schema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return schemaPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SchemaPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Table.Schema domain property.
		/// </summary>
		internal sealed partial class SchemaPropertyHandler : DslModeling::DomainPropertyValueHandler<Table, global::System.String>
		{
			private SchemaPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Table.Schema domain property value handler.
			/// </summary>
			public static readonly SchemaPropertyHandler Instance = new SchemaPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Table.Schema domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SchemaDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Table element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.schemaPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Table element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.schemaPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region WormModel opposite domain role accessor
		/// <summary>
		/// Gets or sets WormModel.
		/// Description for Worm.Designer.WormModelHasTables.Table
		/// </summary>
		public virtual WormModel WormModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Worm.Designer.WormModelHasTables.TableDomainRoleId) as WormModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Worm.Designer.WormModelHasTables.TableDomainRoleId, value);
			}
		}
		#endregion
		#region Entity opposite domain role accessor
		/// <summary>
		/// Gets or sets Entity.
		/// Description for Worm.Designer.TableReferencesEntity.Table
		/// </summary>
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Worm.Designer.TableReferencesEntity.TableDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Worm.Designer.TableReferencesEntity.TableDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Worm.Designer
{
	/// <summary>
	/// DomainClass Property
	/// Свойство сущности
	/// </summary>
	[DslDesign::DisplayNameResource("Worm.Designer.Property.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Worm.Designer.Property.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("a3ab88fb-d6b4-420b-8325-029f77e93036")]
	public partial class Property : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Property domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa3ab88fb, 0xd6b4, 0x420b, 0x83, 0x25, 0x02, 0x9f, 0x77, 0xe9, 0x30, 0x36);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Property(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Property(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x8b3c0c4e, 0x2990, 0x403c, 0x95, 0x28, 0x4a, 0xca, 0xbe, 0x75, 0xec, 0xdd);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Имя свойства
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.Property/Name.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Property/Name.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("8b3c0c4e-2990-403c-9528-4acabe75ecdd")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x72a756c7, 0xb007, 0x4ade, 0xac, 0x88, 0x69, 0x6b, 0x30, 0x6a, 0x41, 0x53);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = "System.String";
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Тип свойства (возможна ссылка на сущность)
		/// </summary>
		[System.ComponentModel.Editor(typeof(Worm.Designer.TypeUIEditor), typeof(System.Drawing.Design.UITypeEditor) )]
		[DslDesign::DisplayNameResource("Worm.Designer.Property/Type.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Property/Type.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("System.String")]
		[DslModeling::DomainObjectId("72a756c7-b007-4ade-ac88-696b306a4153")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x3f78744d, 0x0bae, 0x4bc7, 0x8f, 0x97, 0x8b, 0xd9, 0x8b, 0xba, 0x72, 0xe3);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Описание свойства
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.Property/Description.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Property/Description.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3f78744d-0bae-4bc7-8f97-8bd98bba72e3")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FieldName domain property code
		
		/// <summary>
		/// FieldName domain property Id.
		/// </summary>
		public static readonly global::System.Guid FieldNameDomainPropertyId = new global::System.Guid(0x4c13ac94, 0x3d96, 0x4ae5, 0xad, 0xa6, 0xc6, 0x3c, 0xb9, 0x7f, 0xc2, 0xc2);
		
		/// <summary>
		/// Storage for FieldName
		/// </summary>
		private global::System.String fieldNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of FieldName domain property.
		/// Наименование колонки из БД
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.Property/FieldName.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Property/FieldName.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4c13ac94-3d96-4ae5-ada6-c63cb97fc2c2")]
		public global::System.String FieldName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return fieldNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FieldNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.FieldName domain property.
		/// </summary>
		internal sealed partial class FieldNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private FieldNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.FieldName domain property value handler.
			/// </summary>
			public static readonly FieldNamePropertyHandler Instance = new FieldNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.FieldName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FieldNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.fieldNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.fieldNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Table domain property code
		
		/// <summary>
		/// Table domain property Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainPropertyId = new global::System.Guid(0x8980f42e, 0xee24, 0x4198, 0x8a, 0x4e, 0xb6, 0x96, 0x5e, 0x0c, 0x0f, 0x0a);
		
		/// <summary>
		/// Storage for Table
		/// </summary>
		private global::System.String tablePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Table domain property.
		/// Ссылка на таблицу БД
		/// </summary>
		[System.ComponentModel.Editor(typeof(Worm.Designer.TableUIEditor), typeof(System.Drawing.Design.UITypeEditor) )]
		[DslDesign::DisplayNameResource("Worm.Designer.Property/Table.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Property/Table.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8980f42e-ee24-4198-8a4e-b6965e0c0f0a")]
		public global::System.String Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Table domain property.
		/// </summary>
		internal sealed partial class TablePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private TablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Table domain property value handler.
			/// </summary>
			public static readonly TablePropertyHandler Instance = new TablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Table domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tablePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FieldAccessLevel domain property code
		
		/// <summary>
		/// FieldAccessLevel domain property Id.
		/// </summary>
		public static readonly global::System.Guid FieldAccessLevelDomainPropertyId = new global::System.Guid(0xff8c776c, 0x7228, 0x4b15, 0x89, 0x03, 0xe7, 0x44, 0x34, 0x8e, 0xa9, 0xf9);
		
		/// <summary>
		/// Storage for FieldAccessLevel
		/// </summary>
		private global::Worm.CodeGen.Core.AccessLevel fieldAccessLevelPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::Worm.CodeGen.Core.AccessLevel>("Private");
		
		/// <summary>
		/// Gets or sets the value of FieldAccessLevel domain property.
		/// Уровень доступа к полю класса
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.Property/FieldAccessLevel.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Property/FieldAccessLevel.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(typeof(global::Worm.CodeGen.Core.AccessLevel), "Private")]
		[DslModeling::DomainObjectId("ff8c776c-7228-4b15-8903-e744348ea9f9")]
		public global::Worm.CodeGen.Core.AccessLevel FieldAccessLevel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return fieldAccessLevelPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FieldAccessLevelPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.FieldAccessLevel domain property.
		/// </summary>
		internal sealed partial class FieldAccessLevelPropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::Worm.CodeGen.Core.AccessLevel>
		{
			private FieldAccessLevelPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.FieldAccessLevel domain property value handler.
			/// </summary>
			public static readonly FieldAccessLevelPropertyHandler Instance = new FieldAccessLevelPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.FieldAccessLevel domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FieldAccessLevelDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Worm.CodeGen.Core.AccessLevel GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.fieldAccessLevelPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::Worm.CodeGen.Core.AccessLevel newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Worm.CodeGen.Core.AccessLevel oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.fieldAccessLevelPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Alias domain property code
		
		/// <summary>
		/// Alias domain property Id.
		/// </summary>
		public static readonly global::System.Guid AliasDomainPropertyId = new global::System.Guid(0x0e08e4e5, 0x983f, 0x434a, 0xb2, 0x3d, 0xc2, 0x30, 0x09, 0x6e, 0xd2, 0x0a);
		
		/// <summary>
		/// Storage for Alias
		/// </summary>
		private global::System.String aliasPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Alias domain property.
		/// Property alias
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.Property/Alias.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Property/Alias.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0e08e4e5-983f-434a-b23d-c230096ed20a")]
		public global::System.String Alias
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return aliasPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AliasPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Alias domain property.
		/// </summary>
		internal sealed partial class AliasPropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private AliasPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Alias domain property value handler.
			/// </summary>
			public static readonly AliasPropertyHandler Instance = new AliasPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Alias domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AliasDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.aliasPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.aliasPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AccessLevel domain property code
		
		/// <summary>
		/// AccessLevel domain property Id.
		/// </summary>
		public static readonly global::System.Guid AccessLevelDomainPropertyId = new global::System.Guid(0x67ec9948, 0xc2e5, 0x406c, 0xa7, 0xec, 0x21, 0x93, 0x2a, 0x4f, 0x97, 0xf5);
		
		/// <summary>
		/// Storage for AccessLevel
		/// </summary>
		private global::Worm.CodeGen.Core.AccessLevel accessLevelPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::Worm.CodeGen.Core.AccessLevel>("Public");
		
		/// <summary>
		/// Gets or sets the value of AccessLevel domain property.
		/// Уровень доступа к полю класса
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.Property/AccessLevel.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Property/AccessLevel.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(typeof(global::Worm.CodeGen.Core.AccessLevel), "Public")]
		[DslModeling::DomainObjectId("67ec9948-c2e5-406c-a7ec-21932a4f97f5")]
		public global::Worm.CodeGen.Core.AccessLevel AccessLevel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return accessLevelPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AccessLevelPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.AccessLevel domain property.
		/// </summary>
		internal sealed partial class AccessLevelPropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::Worm.CodeGen.Core.AccessLevel>
		{
			private AccessLevelPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.AccessLevel domain property value handler.
			/// </summary>
			public static readonly AccessLevelPropertyHandler Instance = new AccessLevelPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.AccessLevel domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AccessLevelDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Worm.CodeGen.Core.AccessLevel GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.accessLevelPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::Worm.CodeGen.Core.AccessLevel newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Worm.CodeGen.Core.AccessLevel oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.accessLevelPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Nullable domain property code
		
		/// <summary>
		/// Nullable domain property Id.
		/// </summary>
		public static readonly global::System.Guid NullableDomainPropertyId = new global::System.Guid(0x32ebc3a6, 0x9aa6, 0x4fec, 0xbc, 0xfa, 0xb8, 0x4a, 0xdf, 0x68, 0x4a, 0x9a);
		
		/// <summary>
		/// Storage for Nullable
		/// </summary>
		private global::System.Boolean nullablePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of Nullable domain property.
		/// Nullable
		/// </summary>
		[System.ComponentModel.Editor(typeof(Worm.Designer.BoolUIEditor), typeof(System.Drawing.Design.UITypeEditor) )]
		[DslDesign::DisplayNameResource("Worm.Designer.Property/Nullable.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Property/Nullable.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("32ebc3a6-9aa6-4fec-bcfa-b84adf684a9a")]
		public global::System.Boolean Nullable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nullablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NullablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Nullable domain property.
		/// </summary>
		internal sealed partial class NullablePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.Boolean>
		{
			private NullablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Nullable domain property value handler.
			/// </summary>
			public static readonly NullablePropertyHandler Instance = new NullablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Nullable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NullableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nullablePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nullablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Attributes domain property code
		
		/// <summary>
		/// Attributes domain property Id.
		/// </summary>
		public static readonly global::System.Guid AttributesDomainPropertyId = new global::System.Guid(0x2a909caa, 0x923a, 0x4796, 0xbb, 0x3c, 0xc1, 0x6f, 0x23, 0x66, 0x4b, 0x16);
		
		/// <summary>
		/// Storage for Attributes
		/// </summary>
		private global::System.String attributesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Attributes domain property.
		/// Атрибуты свойства
		/// </summary>
		[System.ComponentModel.Editor(typeof(Worm.Designer.FlagEnumUIEditor), typeof(System.Drawing.Design.UITypeEditor) )]
		[DslDesign::DisplayNameResource("Worm.Designer.Property/Attributes.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Property/Attributes.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2a909caa-923a-4796-bb3c-c16f23664b16")]
		public global::System.String Attributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return attributesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AttributesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Attributes domain property.
		/// </summary>
		internal sealed partial class AttributesPropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private AttributesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Attributes domain property value handler.
			/// </summary>
			public static readonly AttributesPropertyHandler Instance = new AttributesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Attributes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AttributesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.attributesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.attributesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Disabled domain property code
		
		/// <summary>
		/// Disabled domain property Id.
		/// </summary>
		public static readonly global::System.Guid DisabledDomainPropertyId = new global::System.Guid(0x55b97295, 0xab7f, 0x4ae8, 0xb6, 0xa3, 0x5c, 0xfe, 0xe0, 0x2b, 0x9b, 0xe9);
		
		/// <summary>
		/// Storage for Disabled
		/// </summary>
		private global::System.Boolean disabledPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Disabled domain property.
		/// Признак отключения проперти
		/// </summary>
		[System.ComponentModel.Editor(typeof(Worm.Designer.BoolUIEditor), typeof(System.Drawing.Design.UITypeEditor) )]
		[DslDesign::DisplayNameResource("Worm.Designer.Property/Disabled.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Property/Disabled.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("55b97295-ab7f-4ae8-b6a3-5cfee02b9be9")]
		public global::System.Boolean Disabled
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return disabledPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DisabledPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Disabled domain property.
		/// </summary>
		internal sealed partial class DisabledPropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.Boolean>
		{
			private DisabledPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Disabled domain property value handler.
			/// </summary>
			public static readonly DisabledPropertyHandler Instance = new DisabledPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Disabled domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DisabledDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.disabledPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.disabledPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Obsolete domain property code
		
		/// <summary>
		/// Obsolete domain property Id.
		/// </summary>
		public static readonly global::System.Guid ObsoleteDomainPropertyId = new global::System.Guid(0x53125034, 0x447a, 0x4175, 0xb3, 0x0d, 0xa6, 0xea, 0x48, 0x85, 0xf8, 0x46);
		
		/// <summary>
		/// Storage for Obsolete
		/// </summary>
		private global::Worm.CodeGen.Core.Descriptors.ObsoleteType obsoletePropertyStorage = DslModeling::SerializationUtilities.GetValue<global::Worm.CodeGen.Core.Descriptors.ObsoleteType>("None");
		
		/// <summary>
		/// Gets or sets the value of Obsolete domain property.
		/// Make property obsolete
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.Property/Obsolete.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Property/Obsolete.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(typeof(global::Worm.CodeGen.Core.Descriptors.ObsoleteType), "None")]
		[DslModeling::DomainObjectId("53125034-447a-4175-b30d-a6ea4885f846")]
		public global::Worm.CodeGen.Core.Descriptors.ObsoleteType Obsolete
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return obsoletePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ObsoletePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Obsolete domain property.
		/// </summary>
		internal sealed partial class ObsoletePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::Worm.CodeGen.Core.Descriptors.ObsoleteType>
		{
			private ObsoletePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Obsolete domain property value handler.
			/// </summary>
			public static readonly ObsoletePropertyHandler Instance = new ObsoletePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Obsolete domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ObsoleteDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Worm.CodeGen.Core.Descriptors.ObsoleteType GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.obsoletePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::Worm.CodeGen.Core.Descriptors.ObsoleteType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Worm.CodeGen.Core.Descriptors.ObsoleteType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.obsoletePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ObsoleteDescription domain property code
		
		/// <summary>
		/// ObsoleteDescription domain property Id.
		/// </summary>
		public static readonly global::System.Guid ObsoleteDescriptionDomainPropertyId = new global::System.Guid(0xc71cec64, 0xdbd4, 0x4be1, 0x9e, 0x67, 0xc9, 0x41, 0x6f, 0xbd, 0x89, 0x78);
		
		/// <summary>
		/// Storage for ObsoleteDescription
		/// </summary>
		private global::System.String obsoleteDescriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ObsoleteDescription domain property.
		/// Description for obsolete property
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.Property/ObsoleteDescription.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Property/ObsoleteDescription.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c71cec64-dbd4-4be1-9e67-c9416fbd8978")]
		public global::System.String ObsoleteDescription
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return obsoleteDescriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ObsoleteDescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.ObsoleteDescription domain property.
		/// </summary>
		internal sealed partial class ObsoleteDescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private ObsoleteDescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.ObsoleteDescription domain property value handler.
			/// </summary>
			public static readonly ObsoleteDescriptionPropertyHandler Instance = new ObsoleteDescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.ObsoleteDescription domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ObsoleteDescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.obsoleteDescriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.obsoleteDescriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EnablePropertyChanged domain property code
		
		/// <summary>
		/// EnablePropertyChanged domain property Id.
		/// </summary>
		public static readonly global::System.Guid EnablePropertyChangedDomainPropertyId = new global::System.Guid(0x27b55a46, 0x03a8, 0x4f6d, 0x96, 0xc8, 0xdf, 0x53, 0xb4, 0xfd, 0x52, 0xab);
		
		/// <summary>
		/// Storage for EnablePropertyChanged
		/// </summary>
		private global::System.Boolean enablePropertyChangedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of EnablePropertyChanged domain property.
		/// Включает для свойства поднятие события PropertyChanged, при этом реализация идет
		/// на уровне конкретной сущности. При этом в целом для сущности отключается общий
		/// механизм этого события.
		/// </summary>
		[System.ComponentModel.Editor(typeof(Worm.Designer.BoolUIEditor), typeof(System.Drawing.Design.UITypeEditor) )]
		[DslDesign::DisplayNameResource("Worm.Designer.Property/EnablePropertyChanged.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.Property/EnablePropertyChanged.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("27b55a46-03a8-4f6d-96c8-df53b4fd52ab")]
		public global::System.Boolean EnablePropertyChanged
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return enablePropertyChangedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EnablePropertyChangedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.EnablePropertyChanged domain property.
		/// </summary>
		internal sealed partial class EnablePropertyChangedPropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.Boolean>
		{
			private EnablePropertyChangedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.EnablePropertyChanged domain property value handler.
			/// </summary>
			public static readonly EnablePropertyChangedPropertyHandler Instance = new EnablePropertyChangedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.EnablePropertyChanged domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EnablePropertyChangedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.enablePropertyChangedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.enablePropertyChangedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Entity opposite domain role accessor
		/// <summary>
		/// Gets or sets Entity.
		/// Description for Worm.Designer.EntityHasProperties.Property
		/// </summary>
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Worm.Designer.EntityHasProperties.PropertyDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Worm.Designer.EntityHasProperties.PropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Worm.Designer
{
	/// <summary>
	/// DomainClass SupressedProperty
	/// Supressed Property
	/// </summary>
	[DslDesign::DisplayNameResource("Worm.Designer.SupressedProperty.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Worm.Designer.SupressedProperty.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("bc04f16d-d6ae-4ae2-b470-b81094434fb9")]
	public partial class SupressedProperty : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SupressedProperty domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbc04f16d, 0xd6ae, 0x4ae2, 0xb4, 0x70, 0xb8, 0x10, 0x94, 0x43, 0x4f, 0xb9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SupressedProperty(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SupressedProperty(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xa3bda040, 0x3c8c, 0x41e5, 0x9c, 0xd4, 0x04, 0x5f, 0xac, 0x07, 0x4c, 0xa9);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Property name
		/// </summary>
		[System.ComponentModel.Editor(typeof(Worm.Designer.SupressedPropertyUIEditor), typeof(System.Drawing.Design.UITypeEditor) )]
		[DslDesign::DisplayNameResource("Worm.Designer.SupressedProperty/Name.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.SupressedProperty/Name.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("a3bda040-3c8c-41e5-9cd4-045fac074ca9")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SupressedProperty.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<SupressedProperty, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SupressedProperty.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SupressedProperty.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SupressedProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SupressedProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x35a5eac0, 0xbf5d, 0x4f0e, 0xb6, 0xe0, 0x9b, 0x24, 0xc7, 0x7a, 0x01, 0xd7);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = "System.String";
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Suppressed property type
		/// </summary>
		[System.ComponentModel.Editor(typeof(Worm.Designer.TypeUIEditor), typeof(System.Drawing.Design.UITypeEditor) )]
		[DslDesign::DisplayNameResource("Worm.Designer.SupressedProperty/Type.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.SupressedProperty/Type.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("System.String")]
		[DslModeling::DomainObjectId("35a5eac0-bf5d-4f0e-b6e0-9b24c77a01d7")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SupressedProperty.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<SupressedProperty, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SupressedProperty.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SupressedProperty.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SupressedProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SupressedProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Entity opposite domain role accessor
		/// <summary>
		/// Gets or sets Entity.
		/// Description for Worm.Designer.EntityHasSupressedProperties.SupressedProperty
		/// </summary>
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Worm.Designer.EntityHasSupressedProperties.SupressedPropertyDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Worm.Designer.EntityHasSupressedProperties.SupressedPropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Worm.Designer
{
	/// <summary>
	/// DomainClass SelfRelation
	/// Связь сущности самой с собой
	/// </summary>
	[DslDesign::DisplayNameResource("Worm.Designer.SelfRelation.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Worm.Designer.SelfRelation.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("89305501-ec2a-47a4-8d17-2f7a08ce48bf")]
	public partial class SelfRelation : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SelfRelation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x89305501, 0xec2a, 0x47a4, 0x8d, 0x17, 0x2f, 0x7a, 0x08, 0xce, 0x48, 0xbf);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SelfRelation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SelfRelation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DirectAccessor domain property code
		
		/// <summary>
		/// DirectAccessor domain property Id.
		/// </summary>
		public static readonly global::System.Guid DirectAccessorDomainPropertyId = new global::System.Guid(0x4cc7eb74, 0xc9f9, 0x4cfd, 0x9c, 0xf7, 0x8f, 0x27, 0x60, 0x8c, 0x03, 0x6b);
		
		/// <summary>
		/// Storage for DirectAccessor
		/// </summary>
		private global::System.String directAccessorPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DirectAccessor domain property.
		/// Имя связанной сущности для генерации методов
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.SelfRelation/DirectAccessor.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.SelfRelation/DirectAccessor.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4cc7eb74-c9f9-4cfd-9cf7-8f27608c036b")]
		public global::System.String DirectAccessor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return directAccessorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DirectAccessorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SelfRelation.DirectAccessor domain property.
		/// </summary>
		internal sealed partial class DirectAccessorPropertyHandler : DslModeling::DomainPropertyValueHandler<SelfRelation, global::System.String>
		{
			private DirectAccessorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SelfRelation.DirectAccessor domain property value handler.
			/// </summary>
			public static readonly DirectAccessorPropertyHandler Instance = new DirectAccessorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SelfRelation.DirectAccessor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DirectAccessorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SelfRelation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.directAccessorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SelfRelation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.directAccessorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DirectCascadeDelete domain property code
		
		/// <summary>
		/// DirectCascadeDelete domain property Id.
		/// </summary>
		public static readonly global::System.Guid DirectCascadeDeleteDomainPropertyId = new global::System.Guid(0x45766242, 0xccce, 0x4e5a, 0x8e, 0xd7, 0x14, 0xff, 0xf5, 0x25, 0x31, 0x90);
		
		/// <summary>
		/// Storage for DirectCascadeDelete
		/// </summary>
		private global::System.Boolean directCascadeDeletePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of DirectCascadeDelete domain property.
		/// Kаскадное удаление
		/// </summary>
		[System.ComponentModel.Editor(typeof(Worm.Designer.BoolUIEditor), typeof(System.Drawing.Design.UITypeEditor) )]
		[DslDesign::DisplayNameResource("Worm.Designer.SelfRelation/DirectCascadeDelete.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.SelfRelation/DirectCascadeDelete.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("45766242-ccce-4e5a-8ed7-14fff5253190")]
		public global::System.Boolean DirectCascadeDelete
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return directCascadeDeletePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DirectCascadeDeletePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SelfRelation.DirectCascadeDelete domain property.
		/// </summary>
		internal sealed partial class DirectCascadeDeletePropertyHandler : DslModeling::DomainPropertyValueHandler<SelfRelation, global::System.Boolean>
		{
			private DirectCascadeDeletePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SelfRelation.DirectCascadeDelete domain property value handler.
			/// </summary>
			public static readonly DirectCascadeDeletePropertyHandler Instance = new DirectCascadeDeletePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SelfRelation.DirectCascadeDelete domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DirectCascadeDeleteDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(SelfRelation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.directCascadeDeletePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SelfRelation element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.directCascadeDeletePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DirectFieldName domain property code
		
		/// <summary>
		/// DirectFieldName domain property Id.
		/// </summary>
		public static readonly global::System.Guid DirectFieldNameDomainPropertyId = new global::System.Guid(0x18d076fb, 0x382a, 0x4f46, 0xae, 0x6d, 0x5c, 0xf4, 0x68, 0x77, 0x8f, 0xf1);
		
		/// <summary>
		/// Storage for DirectFieldName
		/// </summary>
		private global::System.String directFieldNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DirectFieldName domain property.
		/// Имя поля таблицы связи
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.SelfRelation/DirectFieldName.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.SelfRelation/DirectFieldName.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("18d076fb-382a-4f46-ae6d-5cf468778ff1")]
		public global::System.String DirectFieldName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return directFieldNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DirectFieldNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SelfRelation.DirectFieldName domain property.
		/// </summary>
		internal sealed partial class DirectFieldNamePropertyHandler : DslModeling::DomainPropertyValueHandler<SelfRelation, global::System.String>
		{
			private DirectFieldNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SelfRelation.DirectFieldName domain property value handler.
			/// </summary>
			public static readonly DirectFieldNamePropertyHandler Instance = new DirectFieldNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SelfRelation.DirectFieldName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DirectFieldNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SelfRelation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.directFieldNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SelfRelation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.directFieldNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Disabled domain property code
		
		/// <summary>
		/// Disabled domain property Id.
		/// </summary>
		public static readonly global::System.Guid DisabledDomainPropertyId = new global::System.Guid(0x00f08749, 0x66ca, 0x48dd, 0x93, 0xd9, 0x59, 0x52, 0xd8, 0x72, 0x03, 0xfb);
		
		/// <summary>
		/// Storage for Disabled
		/// </summary>
		private global::System.Boolean disabledPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Disabled domain property.
		/// Disable relation
		/// </summary>
		[System.ComponentModel.Editor(typeof(Worm.Designer.BoolUIEditor), typeof(System.Drawing.Design.UITypeEditor) )]
		[DslDesign::DisplayNameResource("Worm.Designer.SelfRelation/Disabled.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.SelfRelation/Disabled.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("00f08749-66ca-48dd-93d9-5952d87203fb")]
		public global::System.Boolean Disabled
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return disabledPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DisabledPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SelfRelation.Disabled domain property.
		/// </summary>
		internal sealed partial class DisabledPropertyHandler : DslModeling::DomainPropertyValueHandler<SelfRelation, global::System.Boolean>
		{
			private DisabledPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SelfRelation.Disabled domain property value handler.
			/// </summary>
			public static readonly DisabledPropertyHandler Instance = new DisabledPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SelfRelation.Disabled domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DisabledDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(SelfRelation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.disabledPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SelfRelation element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.disabledPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReverseAccessor domain property code
		
		/// <summary>
		/// ReverseAccessor domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReverseAccessorDomainPropertyId = new global::System.Guid(0x763e2750, 0x9675, 0x41b9, 0x8c, 0xce, 0x32, 0x50, 0xb1, 0x03, 0x2a, 0x5a);
		
		/// <summary>
		/// Storage for ReverseAccessor
		/// </summary>
		private global::System.String reverseAccessorPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ReverseAccessor domain property.
		/// Имя связанной сущности для генерации методов
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.SelfRelation/ReverseAccessor.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.SelfRelation/ReverseAccessor.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("763e2750-9675-41b9-8cce-3250b1032a5a")]
		public global::System.String ReverseAccessor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return reverseAccessorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReverseAccessorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SelfRelation.ReverseAccessor domain property.
		/// </summary>
		internal sealed partial class ReverseAccessorPropertyHandler : DslModeling::DomainPropertyValueHandler<SelfRelation, global::System.String>
		{
			private ReverseAccessorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SelfRelation.ReverseAccessor domain property value handler.
			/// </summary>
			public static readonly ReverseAccessorPropertyHandler Instance = new ReverseAccessorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SelfRelation.ReverseAccessor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReverseAccessorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SelfRelation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.reverseAccessorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SelfRelation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.reverseAccessorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReverseCascadeDelete domain property code
		
		/// <summary>
		/// ReverseCascadeDelete domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReverseCascadeDeleteDomainPropertyId = new global::System.Guid(0xba170593, 0x27b7, 0x4523, 0x9d, 0x3a, 0xa6, 0x55, 0x1c, 0x49, 0x2c, 0x26);
		
		/// <summary>
		/// Storage for ReverseCascadeDelete
		/// </summary>
		private global::System.Boolean reverseCascadeDeletePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of ReverseCascadeDelete domain property.
		/// Каскадное удаление
		/// </summary>
		[System.ComponentModel.Editor(typeof(Worm.Designer.BoolUIEditor), typeof(System.Drawing.Design.UITypeEditor) )]
		[DslDesign::DisplayNameResource("Worm.Designer.SelfRelation/ReverseCascadeDelete.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.SelfRelation/ReverseCascadeDelete.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("ba170593-27b7-4523-9d3a-a6551c492c26")]
		public global::System.Boolean ReverseCascadeDelete
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return reverseCascadeDeletePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReverseCascadeDeletePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SelfRelation.ReverseCascadeDelete domain property.
		/// </summary>
		internal sealed partial class ReverseCascadeDeletePropertyHandler : DslModeling::DomainPropertyValueHandler<SelfRelation, global::System.Boolean>
		{
			private ReverseCascadeDeletePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SelfRelation.ReverseCascadeDelete domain property value handler.
			/// </summary>
			public static readonly ReverseCascadeDeletePropertyHandler Instance = new ReverseCascadeDeletePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SelfRelation.ReverseCascadeDelete domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReverseCascadeDeleteDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(SelfRelation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.reverseCascadeDeletePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SelfRelation element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.reverseCascadeDeletePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReverseFieldName domain property code
		
		/// <summary>
		/// ReverseFieldName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReverseFieldNameDomainPropertyId = new global::System.Guid(0xd4f2dffb, 0x91fb, 0x419b, 0xb5, 0xca, 0xac, 0xa2, 0xfa, 0x83, 0xef, 0x3b);
		
		/// <summary>
		/// Storage for ReverseFieldName
		/// </summary>
		private global::System.String reverseFieldNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ReverseFieldName domain property.
		/// Имя поля таблицы связи
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.SelfRelation/ReverseFieldName.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.SelfRelation/ReverseFieldName.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d4f2dffb-91fb-419b-b5ca-aca2fa83ef3b")]
		public global::System.String ReverseFieldName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return reverseFieldNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReverseFieldNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SelfRelation.ReverseFieldName domain property.
		/// </summary>
		internal sealed partial class ReverseFieldNamePropertyHandler : DslModeling::DomainPropertyValueHandler<SelfRelation, global::System.String>
		{
			private ReverseFieldNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SelfRelation.ReverseFieldName domain property value handler.
			/// </summary>
			public static readonly ReverseFieldNamePropertyHandler Instance = new ReverseFieldNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SelfRelation.ReverseFieldName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReverseFieldNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SelfRelation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.reverseFieldNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SelfRelation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.reverseFieldNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Table domain property code
		
		/// <summary>
		/// Table domain property Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainPropertyId = new global::System.Guid(0xe0558ce9, 0x8a97, 0x43a2, 0xb3, 0x3c, 0xab, 0x6c, 0x6e, 0x1b, 0xcd, 0xe8);
		
		/// <summary>
		/// Storage for Table
		/// </summary>
		private global::System.String tablePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Table domain property.
		/// Имя таблицы связи
		/// </summary>
		[System.ComponentModel.Editor(typeof(Worm.Designer.TableUIEditor), typeof(System.Drawing.Design.UITypeEditor) )]
		[DslDesign::DisplayNameResource("Worm.Designer.SelfRelation/Table.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.SelfRelation/Table.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e0558ce9-8a97-43a2-b33c-ab6c6e1bcde8")]
		public global::System.String Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SelfRelation.Table domain property.
		/// </summary>
		internal sealed partial class TablePropertyHandler : DslModeling::DomainPropertyValueHandler<SelfRelation, global::System.String>
		{
			private TablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SelfRelation.Table domain property value handler.
			/// </summary>
			public static readonly TablePropertyHandler Instance = new TablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SelfRelation.Table domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SelfRelation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tablePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SelfRelation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region UnderlyingEntity domain property code
		
		/// <summary>
		/// UnderlyingEntity domain property Id.
		/// </summary>
		public static readonly global::System.Guid UnderlyingEntityDomainPropertyId = new global::System.Guid(0xe4d62605, 0xd81b, 0x46e7, 0xa5, 0xd6, 0x62, 0x66, 0xe1, 0xae, 0x9a, 0x1d);
		
		/// <summary>
		/// Storage for UnderlyingEntity
		/// </summary>
		private global::System.String underlyingEntityPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of UnderlyingEntity domain property.
		/// Сущность реализующая связь
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.SelfRelation/UnderlyingEntity.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.SelfRelation/UnderlyingEntity.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e4d62605-d81b-46e7-a5d6-6266e1ae9a1d")]
		public global::System.String UnderlyingEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return underlyingEntityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UnderlyingEntityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SelfRelation.UnderlyingEntity domain property.
		/// </summary>
		internal sealed partial class UnderlyingEntityPropertyHandler : DslModeling::DomainPropertyValueHandler<SelfRelation, global::System.String>
		{
			private UnderlyingEntityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SelfRelation.UnderlyingEntity domain property value handler.
			/// </summary>
			public static readonly UnderlyingEntityPropertyHandler Instance = new UnderlyingEntityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SelfRelation.UnderlyingEntity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UnderlyingEntityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SelfRelation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.underlyingEntityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SelfRelation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.underlyingEntityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DirectAccessedEntityType domain property code
		
		/// <summary>
		/// DirectAccessedEntityType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DirectAccessedEntityTypeDomainPropertyId = new global::System.Guid(0x9c577e94, 0x1d95, 0x40ab, 0xaf, 0x19, 0x34, 0x94, 0x9c, 0xd8, 0xde, 0x47);
		
		/// <summary>
		/// Storage for DirectAccessedEntityType
		/// </summary>
		private global::System.String directAccessedEntityTypePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DirectAccessedEntityType domain property.
		/// Тип связанной сущности для генерации методов
		/// </summary>
		[System.ComponentModel.Editor(typeof(Worm.Designer.TypeUIEditor), typeof(System.Drawing.Design.UITypeEditor) )]
		[DslDesign::DisplayNameResource("Worm.Designer.SelfRelation/DirectAccessedEntityType.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.SelfRelation/DirectAccessedEntityType.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9c577e94-1d95-40ab-af19-34949cd8de47")]
		public global::System.String DirectAccessedEntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return directAccessedEntityTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DirectAccessedEntityTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SelfRelation.DirectAccessedEntityType domain property.
		/// </summary>
		internal sealed partial class DirectAccessedEntityTypePropertyHandler : DslModeling::DomainPropertyValueHandler<SelfRelation, global::System.String>
		{
			private DirectAccessedEntityTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SelfRelation.DirectAccessedEntityType domain property value handler.
			/// </summary>
			public static readonly DirectAccessedEntityTypePropertyHandler Instance = new DirectAccessedEntityTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SelfRelation.DirectAccessedEntityType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DirectAccessedEntityTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SelfRelation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.directAccessedEntityTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SelfRelation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.directAccessedEntityTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReverseAccessedEntityType domain property code
		
		/// <summary>
		/// ReverseAccessedEntityType domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReverseAccessedEntityTypeDomainPropertyId = new global::System.Guid(0x03fe3ca8, 0xb3f8, 0x4ac6, 0xbd, 0x2c, 0x10, 0xc8, 0x24, 0x7c, 0xf2, 0xfc);
		
		/// <summary>
		/// Storage for ReverseAccessedEntityType
		/// </summary>
		private global::System.String reverseAccessedEntityTypePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ReverseAccessedEntityType domain property.
		/// Тип связанной сущности для генерации методов
		/// </summary>
		[System.ComponentModel.Editor(typeof(Worm.Designer.TypeUIEditor), typeof(System.Drawing.Design.UITypeEditor) )]
		[DslDesign::DisplayNameResource("Worm.Designer.SelfRelation/ReverseAccessedEntityType.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.SelfRelation/ReverseAccessedEntityType.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("03fe3ca8-b3f8-4ac6-bd2c-10c8247cf2fc")]
		public global::System.String ReverseAccessedEntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return reverseAccessedEntityTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReverseAccessedEntityTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SelfRelation.ReverseAccessedEntityType domain property.
		/// </summary>
		internal sealed partial class ReverseAccessedEntityTypePropertyHandler : DslModeling::DomainPropertyValueHandler<SelfRelation, global::System.String>
		{
			private ReverseAccessedEntityTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SelfRelation.ReverseAccessedEntityType domain property value handler.
			/// </summary>
			public static readonly ReverseAccessedEntityTypePropertyHandler Instance = new ReverseAccessedEntityTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SelfRelation.ReverseAccessedEntityType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReverseAccessedEntityTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SelfRelation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.reverseAccessedEntityTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SelfRelation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.reverseAccessedEntityTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xf26ad602, 0x9dad, 0x479d, 0x80, 0xf7, 0xfb, 0x49, 0x40, 0x3b, 0xd3, 0x23);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Name
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.SelfRelation/Name.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.SelfRelation/Name.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("f26ad602-9dad-479d-80f7-fb49403bd323")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SelfRelation.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<SelfRelation, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SelfRelation.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SelfRelation.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SelfRelation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SelfRelation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Entity opposite domain role accessor
		/// <summary>
		/// Gets or sets Entity.
		/// Description for Worm.Designer.EntityHasSelfRelations.SelfRelation
		/// </summary>
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Worm.Designer.EntityHasSelfRelations.SelfRelationDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Worm.Designer.EntityHasSelfRelations.SelfRelationDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Worm.Designer
{
	/// <summary>
	/// DomainClass WormType
	/// Description for Worm.Designer.WormType
	/// </summary>
	[DslDesign::DisplayNameResource("Worm.Designer.WormType.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Worm.Designer.WormType.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("cfb4d93a-3cca-4d26-bff1-f0c193cd6fd5")]
	public partial class WormType : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// WormType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcfb4d93a, 0x3cca, 0x4d26, 0xbf, 0xf1, 0xf0, 0xc1, 0x93, 0xcd, 0x6f, 0xd5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public WormType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public WormType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x1b097dfe, 0x9806, 0x4562, 0x81, 0x17, 0x51, 0x65, 0x21, 0x12, 0x4e, 0xce);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Worm.Designer.WormType.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.WormType/Name.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.WormType/Name.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("1b097dfe-9806-4562-8117-516521124ece")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the WormType.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<WormType, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the WormType.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the WormType.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(WormType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(WormType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IdProperty domain property code
		
		/// <summary>
		/// IdProperty domain property Id.
		/// </summary>
		public static readonly global::System.Guid IdPropertyDomainPropertyId = new global::System.Guid(0x2147e4ef, 0xf4b9, 0x4c02, 0x8a, 0xd7, 0xc6, 0x64, 0x95, 0x88, 0x5c, 0x32);
		
		/// <summary>
		/// Storage for IdProperty
		/// </summary>
		private global::System.String idPropertyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of IdProperty domain property.
		/// Description for Worm.Designer.WormType.Id Property
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.WormType/IdProperty.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.WormType/IdProperty.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2147e4ef-f4b9-4c02-8ad7-c66495885c32")]
		public global::System.String IdProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return idPropertyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IdPropertyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the WormType.IdProperty domain property.
		/// </summary>
		internal sealed partial class IdPropertyPropertyHandler : DslModeling::DomainPropertyValueHandler<WormType, global::System.String>
		{
			private IdPropertyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the WormType.IdProperty domain property value handler.
			/// </summary>
			public static readonly IdPropertyPropertyHandler Instance = new IdPropertyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the WormType.IdProperty domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IdPropertyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(WormType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.idPropertyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(WormType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.idPropertyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region WormModel opposite domain role accessor
		/// <summary>
		/// Gets or sets WormModel.
		/// Description for Worm.Designer.WormModelHasTypes.WormType
		/// </summary>
		public virtual WormModel WormModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Worm.Designer.WormModelHasTypes.WormTypeDomainRoleId) as WormModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Worm.Designer.WormModelHasTypes.WormTypeDomainRoleId, value);
			}
		}
		#endregion
		#region Entities opposite domain role accessor
		/// <summary>
		/// Gets a list of Entities.
		/// Description for Worm.Designer.WormTypeReferencesEntities.WormType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> Entities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Entity>(this, global::Worm.Designer.WormTypeReferencesEntities.WormTypeDomainRoleId);
			}
		}
		#endregion
	}
}
