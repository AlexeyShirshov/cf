//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This file was generated by Worm.CodeGen.CodeGenerator v1.0.3463.31031 application(Worm.CodeGen.Core v1.0.3463.31013).
//
//By user 'Alex' at 26.06.2009 17:07:31.
//
//
namespace test2
{
	
	
	[Worm.Entities.Meta.EntityAttribute(typeof(test2.Albums.AlbumsSchemaDef), "1", EntityName=test2.Albums.Descriptor.EntityName)]
	[System.SerializableAttribute()]
	public partial class Albums : Worm.Entities.KeyEntity, Worm.Entities.IOptimizedValues
	{
		
		#region Private Fields
		private int _iD;
		
		private string _name;
		
		private System.Nullable<System.DateTime> _release_dt;
		#endregion
		
		#region Constructors
		public Albums()
		{
			this._dontRaisePropertyChange = true;
		}
		
		public Albums(int id, Worm.Cache.CacheBase cache, Worm.ObjectMappingEngine schema)
		{
			base.Init(id, cache, schema);
			this._dontRaisePropertyChange = true;
		}
		#endregion
		
		#region Properties
		public override object Identifier
		{
			get
			{
				return this._iD;
			}
			set
			{
				this._iD = ((int)(System.Convert.ChangeType(value, typeof(int))));
			}
		}
		
		[Worm.Entities.Meta.EntityPropertyAttribute(PropertyAlias=test2.Albums.Properties.ID)]
		public virtual int ID
		{
			get
			{
using (this.Read(test2.Albums.Properties.ID))
{
    return this._iD;
}

			}
			set
			{
using (this.Write(test2.Albums.Properties.ID))
{
    this._iD = value;
}

			}
		}
		
		[Worm.Entities.Meta.EntityPropertyAttribute(PropertyAlias=test2.Albums.Properties.Name)]
		public virtual string Name
		{
			get
			{
using (this.Read(test2.Albums.Properties.Name))
{
    return this._name;
}

			}
			set
			{
using (this.Write(test2.Albums.Properties.Name))
{
    this._name = value;
}

			}
		}
		
		[Worm.Entities.Meta.EntityPropertyAttribute(PropertyAlias=test2.Albums.Properties.Release_dt)]
		public virtual System.Nullable<System.DateTime> Release_dt
		{
			get
			{
using (this.Read(test2.Albums.Properties.Release_dt))
{
    return this._release_dt;
}

			}
			set
			{
using (this.Write(test2.Albums.Properties.Release_dt))
{
    this._release_dt = value;
}

			}
		}
		#endregion
		
		#region Static members
		public static Albums.AlbumsAlias CreateAlias()
		{
			return new test2.Albums.AlbumsAlias();
		}
		
		public static Albums.AlbumsProperties GetAlias(Worm.Query.QueryAlias objectAlias)
		{
			return new test2.Albums.AlbumsProperties(objectAlias);
		}
		#endregion
		
		#region Base type related members
		protected override void CopyProperties(Worm.Entities._IEntity from, Worm.Entities._IEntity to, Worm.OrmManager mgr, Worm.Entities.Meta.IEntitySchema oschema)
		{
			((test2.Albums)(to))._iD = ((test2.Albums)(from))._iD;
			((test2.Albums)(to))._name = ((test2.Albums)(from))._name;
			((test2.Albums)(to))._release_dt = ((test2.Albums)(from))._release_dt;
		}
		
		public virtual void SetValueOptimized(string propertyAlias, Worm.Entities.Meta.IEntitySchema schema, object value)
		{
			string fieldName = propertyAlias;
			if (test2.Albums.Properties.ID.Equals(fieldName))
			{
				this._iD = ((int)(System.Convert.ChangeType(value, typeof(int))));
				return;
			}
			if (test2.Albums.Properties.Name.Equals(fieldName))
			{
				this._name = ((string)(value));
				return;
			}
			if (test2.Albums.Properties.Release_dt.Equals(fieldName))
			{
				System.IConvertible iconvVal = (value as System.IConvertible);
				if ((iconvVal == null))
				{
					this._release_dt = ((System.Nullable<System.DateTime>)(value));
				}
				else
				{
					this._release_dt = iconvVal.ToDateTime(System.Threading.Thread.CurrentThread.CurrentCulture);
				}
				return;
			}
		}
		
		public virtual object GetValueOptimized(string propertyAlias, Worm.Entities.Meta.IEntitySchema schema)
		{
			if (test2.Albums.Properties.ID.Equals(propertyAlias))
			{
				return this._iD;
			}
			if (test2.Albums.Properties.Name.Equals(propertyAlias))
			{
				return this._name;
			}
			if (test2.Albums.Properties.Release_dt.Equals(propertyAlias))
			{
				return this._release_dt;
			}
			return this.GetMappingEngine().GetPropertyValue(null, propertyAlias);
		}
		
		protected override void SetPK(Worm.Entities.Meta.PKDesc[] pks, Worm.ObjectMappingEngine mpe)
		{
			this._iD = ((int)(System.Convert.ChangeType(pks[0].Value, typeof(int))));
		}
		
		public override Worm.Entities.Meta.PKDesc[] GetPKValues()
		{
			return new Worm.Entities.Meta.PKDesc[] {
					new Worm.Entities.Meta.PKDesc("ID", this._iD)};
		}
		#endregion
		
		#region Nested Types
		public partial class AlbumsSchemaDef : Worm.Entities.Meta.IEntitySchemaBase, Worm.Entities.Meta.ISchemaInit
		{
			
			#region Private Fields
			private Worm.Entities.Meta.SourceFragment _table;
			
			private object _tableLock = new object();
			
			private Worm.Collections.IndexedCollection<string, Worm.Entities.Meta.MapField2Column> _idx;
			
			private object _forIdxLock = new object();
			
			protected Worm.ObjectMappingEngine _schema;
			
			protected System.Type _entityType;
			#endregion
			
			#region Properties
			public virtual Worm.Entities.Meta.SourceFragment Table
			{
				get
				{
					if ((this._table == null))
					{
lock (this._tableLock)
{
    if ((this._table == null)) {
        this._table = new Worm.Entities.Meta.SourceFragment("dbo", "Albums");
    }
}

					}
					return this._table;
				}
			}
			#endregion
			
			public virtual Worm.Collections.IndexedCollection<string, Worm.Entities.Meta.MapField2Column> GetFieldColumnMap()
			{
				if ((this._idx == null))
				{
lock (this._forIdxLock)
{
    if ((this._idx == null)) {
        Worm.Collections.IndexedCollection<string, Worm.Entities.Meta.MapField2Column> idx = new Worm.Entities.Meta.OrmObjectIndex();
        idx["ID"] = new Worm.Entities.Meta.MapField2Column("ID", "id", this.Table, Worm.Entities.Meta.Field2DbRelations.PK);
        idx["Name"] = new Worm.Entities.Meta.MapField2Column("Name", "name", this.Table, Worm.Entities.Meta.Field2DbRelations.None);
        idx["Release_dt"] = new Worm.Entities.Meta.MapField2Column("Release_dt", "release_dt", this.Table, Worm.Entities.Meta.Field2DbRelations.None);
        this._idx = idx;
    }
}

				}
				return this._idx;
			}
			
			public virtual bool ChangeValueType(Worm.Entities.Meta.EntityPropertyAttribute c, object value, ref object newvalue)
			{
				if ((((c.Behavior & Worm.Entities.Meta.Field2DbRelations.InsertDefault) 
							== Worm.Entities.Meta.Field2DbRelations.InsertDefault) 
							&& ((value == null) 
							|| System.Activator.CreateInstance(value.GetType()).Equals(value))))
				{
					newvalue = System.DBNull.Value;
					return true;
				}
				newvalue = value;
				return false;
			}
			
			public virtual string[] GetSuppressedFields()
			{
				return new string[0];
			}
			
			public void GetSchema(Worm.ObjectMappingEngine schema, System.Type t)
			{
				this._schema = schema;
				this._entityType = t;
			}
			
			#region Nested Types
			public enum TablesLink
			{
				
				tbldboAlbums = 0,
			}
			#endregion
		}
		
		/// <summary>
		///Алиасы свойств сущностей испльзуемые в объектной модели.
		///</summary>
		public partial class Properties
		{
			
			#region Private Fields
			public const string ID = "ID";
			
			public const string Name = "Name";
			
			public const string Release_dt = "Release_dt";
			#endregion
			
			#region Constructors
			protected Properties()
			{
			}
			#endregion
		}
		
		/// <summary>
		///Ссылки на поля сущностей.
		///</summary>
		public partial class props
		{
			
			#region Static members
			private static Worm.Query.ObjectProperty _iD = new Worm.Query.ObjectProperty(test2.Albums.Descriptor.EntityName, test2.Albums.Properties.ID);
			
			private static Worm.Query.ObjectProperty _name = new Worm.Query.ObjectProperty(test2.Albums.Descriptor.EntityName, test2.Albums.Properties.Name);
			
			private static Worm.Query.ObjectProperty _release_dt = new Worm.Query.ObjectProperty(test2.Albums.Descriptor.EntityName, test2.Albums.Properties.Release_dt);
			
			#region Constructors
			protected props()
			{
			}
			#endregion
			
			public static Worm.Query.ObjectProperty ID
			{
				get
				{
					return test2.Albums.props._iD;
				}
			}
			
			public static Worm.Query.ObjectProperty Name
			{
				get
				{
					return test2.Albums.props._name;
				}
			}
			
			public static Worm.Query.ObjectProperty Release_dt
			{
				get
				{
					return test2.Albums.props._release_dt;
				}
			}
			#endregion
		}
		
		/// <summary>
		///Описатель сущности.
		///</summary>
		public partial class Descriptor
		{
			
			#region Private Fields
			/// <summary>
			///Имя сущности в объектной модели.
			///</summary>
			public const string EntityName = "Albums";
			#endregion
			
			#region Constructors
			protected Descriptor()
			{
			}
			#endregion
		}
		
		public class AlbumsAlias : Worm.Query.QueryAlias
		{
			
			#region Constructors
			public AlbumsAlias() : 
					base(test2.Albums.Descriptor.EntityName)
			{
			}
			#endregion
			
			#region Properties
			public Worm.Query.ObjectProperty ID
			{
				get
				{
					return new Worm.Query.ObjectProperty(this, test2.Albums.Properties.ID);
				}
			}
			
			public Worm.Query.ObjectProperty Name
			{
				get
				{
					return new Worm.Query.ObjectProperty(this, test2.Albums.Properties.Name);
				}
			}
			
			public Worm.Query.ObjectProperty Release_dt
			{
				get
				{
					return new Worm.Query.ObjectProperty(this, test2.Albums.Properties.Release_dt);
				}
			}
			#endregion
		}
		
		public class AlbumsProperties
		{
			
			#region Private Fields
			private Worm.Query.QueryAlias _objectAlias;
			#endregion
			
public static implicit operator Worm.Query.QueryAlias(Albums.AlbumsProperties entityAlias)
{
    return entityAlias._objectAlias;
}

			
			#region Constructors
			public AlbumsProperties(Worm.Query.QueryAlias objectAlias)
			{
				this._objectAlias = objectAlias;
			}
			#endregion
			
			#region Properties
			public Worm.Query.ObjectProperty ID
			{
				get
				{
					return new Worm.Query.ObjectProperty(this._objectAlias, test2.Albums.Properties.ID);
				}
			}
			
			public Worm.Query.ObjectProperty Name
			{
				get
				{
					return new Worm.Query.ObjectProperty(this._objectAlias, test2.Albums.Properties.Name);
				}
			}
			
			public Worm.Query.ObjectProperty Release_dt
			{
				get
				{
					return new Worm.Query.ObjectProperty(this._objectAlias, test2.Albums.Properties.Release_dt);
				}
			}
			#endregion
		}
		#endregion
	}
}
