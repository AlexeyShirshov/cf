//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This file was generated by Worm.CodeGen.CodeGenerator v1.0.3007.4016 application(Worm.CodeGen.Core v1.0.3007.4015).
//
//By user 'mike' at 31.03.2008 2:25:11.
//
//
namespace DAWorm
{


    [Worm.Orm.Meta.EntityAttribute(typeof(DAWorm.User.UserSchemaDef), "1", EntityName = DAWorm.User.Descriptor.EntityName)]
    [System.SerializableAttribute()]
    public partial class User : Worm.Orm.OrmBaseT<User>, Worm.Orm.Meta.IOrmEditable<User>
    {

        #region Private Fields
        private string _first_name;

        private string _last_name;
        #endregion

        #region Constructors
        public User()
        {
            this._dontRaisePropertyChange = true;
        }

        public User(int id, Worm.Cache.OrmCacheBase cache, Worm.QueryGenerator schema) :
            base(id, cache, schema)
        {
            this._dontRaisePropertyChange = true;
        }
        #endregion

        #region Properties
        [Worm.Orm.Meta.ColumnAttribute(DAWorm.User.Properties.First_name)]
        public virtual string First_name
        {
            get
            {
                using (this.Read(DAWorm.User.Properties.First_name))
                {
                    return this._first_name;
                }
            }
            set
            {
                using (this.Write(DAWorm.User.Properties.First_name))
                {
                    this._first_name = value;
                }
            }
        }

        [Worm.Orm.Meta.ColumnAttribute(DAWorm.User.Properties.Last_name)]
        public virtual string Last_name
        {
            get
            {
                using (this.Read(DAWorm.User.Properties.Last_name))
                {
                    return this._last_name;
                }
            }
            set
            {
                using (this.Write(DAWorm.User.Properties.Last_name))
                {
                    this._last_name = value;
                }
            }
        }
        #endregion

        public virtual void CopyBody(User from, User to)
        {
            to._first_name = from._first_name;
            to._last_name = from._last_name;
        }

        public override void SetValue(System.Reflection.PropertyInfo pi, Worm.Orm.Meta.ColumnAttribute c, object value)
        {
            string fieldName = c.FieldName;
            if (DAWorm.User.Properties.First_name.Equals(fieldName))
            {
                this._first_name = ((string)(value));
                return;
            }
            if (DAWorm.User.Properties.Last_name.Equals(fieldName))
            {
                this._last_name = ((string)(value));
                return;
            }
            base.SetValue(pi, c, value);
        }

        public override object GetValue(string propAlias, Worm.Orm.Meta.IOrmObjectSchemaBase schema)
        {
            if (DAWorm.User.Properties.First_name.Equals(propAlias))
            {
                return this.First_name;
            }
            if (DAWorm.User.Properties.Last_name.Equals(propAlias))
            {
                return this.Last_name;
            }
            return base.GetValue(propAlias, schema);
        }

        public override void CreateObject(string fieldName, object value)
        {
            throw new System.InvalidOperationException("Invalid method usage.");
        }

        #region Nested Types
        /// <summary>
        ///Алиасы свойств сущностей испльзуемые в объектной модели.
        ///</summary>
        public class Properties
        {

            #region Private Fields
            public const string ID = "ID";

            public const string First_name = "First_name";

            public const string Last_name = "Last_name";
            #endregion

            #region Constructors
            protected Properties()
            {
            }
            #endregion
        }

        /// <summary>
        ///Описатель сущности.
        ///</summary>
        public class Descriptor
        {

            #region Private Fields
            /// <summary>
            ///Имя сущности в объектной модели.
            ///</summary>
            public const string EntityName = "User";
            #endregion

            #region Constructors
            protected Descriptor()
            {
            }
            #endregion
        }

        public partial class UserSchemaDef : Worm.Orm.Meta.IOrmObjectSchema, Worm.Orm.Meta.IOrmSchemaInit
        {

            #region Private Fields
            private Worm.Collections.IndexedCollection<string, Worm.Orm.Meta.MapField2Column> _idx;

            private Worm.Orm.Meta.OrmTable[] _tables;

            private object _forTablesLock = new object();

            private Worm.Orm.Meta.M2MRelation[] _m2mRelations;

            private object _forM2MRelationsLock = new object();

            private object _forIdxLock = new object();

            protected Worm.QueryGenerator _schema;

            protected System.Type _entityType;
            #endregion

            protected virtual Worm.Orm.Meta.OrmTable GetTypeMainTable(System.Type type)
            {
                Worm.Orm.Meta.OrmTable[] tables;
                tables = this._schema.GetTables(type);
                return ((Worm.Orm.Meta.OrmTable)(tables.GetValue(0)));
            }

            public virtual Worm.Orm.Meta.OrmTable[] GetTables()
            {
                if ((this._tables == null))
                {
                    lock (this._forTablesLock)
                    {
                        if ((this._tables == null))
                        {
                            this._tables = new Worm.Orm.Meta.OrmTable[] {
                new Worm.Orm.Meta.OrmTable("[dbo].[tbl_user]")};
                        }
                    }
                }
                return this._tables;
            }

            protected virtual Worm.Orm.Meta.OrmTable GetTable(DAWorm.User.UserSchemaDef.TablesLink tbl)
            {
                return ((Worm.Orm.Meta.OrmTable)(this.GetTables().GetValue(((int)(tbl)))));
            }

            public virtual bool ChangeValueType(Worm.Orm.Meta.ColumnAttribute c, object value, ref object newvalue)
            {
                if ((((c._behavior & Worm.Orm.Meta.Field2DbRelations.InsertDefault)
                            == Worm.Orm.Meta.Field2DbRelations.InsertDefault)
                            && ((value == null)
                            || System.Activator.CreateInstance(value.GetType()).Equals(value))))
                {
                    newvalue = System.DBNull.Value;
                    return true;
                }
                newvalue = value;
                return false;
            }

            public virtual Worm.Criteria.Joins.OrmJoin GetJoins(Worm.Orm.Meta.OrmTable left, Worm.Orm.Meta.OrmTable right)
            {
                return default(Worm.Database.Criteria.Joins.OrmJoin);
            }

            public virtual Worm.Orm.Meta.ColumnAttribute[] GetSuppressedColumns()
            {
                return new Worm.Orm.Meta.ColumnAttribute[0];
            }

            public virtual Worm.Criteria.Core.IFilter GetFilter(object filter_info)
            {
                return null;
            }

            public virtual Worm.Orm.Meta.M2MRelation[] GetM2MRelations()
            {
                if ((this._m2mRelations == null))
                {
                    lock (this._forM2MRelationsLock)
                    {
                        if ((this._m2mRelations == null))
                        {
                            Worm.Orm.Meta.M2MRelation[] m2mRelations = new Worm.Orm.Meta.M2MRelation[0];
                            this._m2mRelations = m2mRelations;
                        }
                    }
                }
                return this._m2mRelations;
            }

            public virtual Worm.Collections.IndexedCollection<string, Worm.Orm.Meta.MapField2Column> GetFieldColumnMap()
            {
                if ((this._idx == null))
                {
                    lock (this._forIdxLock)
                    {
                        if ((this._idx == null))
                        {
                            Worm.Collections.IndexedCollection<string, Worm.Orm.Meta.MapField2Column> idx = new Worm.Cache.OrmObjectIndex();
                            idx.Add(new Worm.Orm.Meta.MapField2Column("ID", "user_id", this.GetTable(DAWorm.User.UserSchemaDef.TablesLink.tbldbotbl_user), Worm.Orm.Meta.Field2DbRelations.None));
                            idx.Add(new Worm.Orm.Meta.MapField2Column("First_name", "first_name", this.GetTable(DAWorm.User.UserSchemaDef.TablesLink.tbldbotbl_user)));
                            idx.Add(new Worm.Orm.Meta.MapField2Column("Last_name", "last_name", this.GetTable(DAWorm.User.UserSchemaDef.TablesLink.tbldbotbl_user)));
                            this._idx = idx;
                        }
                    }
                }
                return this._idx;
            }

            public virtual void GetSchema(Worm.QueryGenerator schema, System.Type t)
            {
                this._schema = schema;
                this._entityType = t;
            }

            #region Nested Types
            public enum TablesLink
            {

                tbldbotbl_user = 0,
            }
            #endregion
        }
        #endregion
    }
}
