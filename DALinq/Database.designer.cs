#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DALinq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="TestDA")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Inserttbl_phone(tbl_phone instance);
    partial void Updatetbl_phone(tbl_phone instance);
    partial void Deletetbl_phone(tbl_phone instance);
    partial void Inserttbl_user(tbl_user instance);
    partial void Updatetbl_user(tbl_user instance);
    partial void Deletetbl_user(tbl_user instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::DALinq.Properties.Settings.Default.TestDAConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tbl_phone> tbl_phones
		{
			get
			{
				return this.GetTable<tbl_phone>();
			}
		}
		
		public System.Data.Linq.Table<tbl_user> tbl_users
		{
			get
			{
				return this.GetTable<tbl_user>();
			}
		}
	}
	
	[Table(Name="dbo.tbl_phone")]
	public partial class tbl_phone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _phone_id;
		
		private int _user_id;
		
		private string _phone_number;
		
		private EntityRef<tbl_user> _tbl_user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onphone_idChanging(int value);
    partial void Onphone_idChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onphone_numberChanging(string value);
    partial void Onphone_numberChanged();
    #endregion
		
		public tbl_phone()
		{
			this._tbl_user = default(EntityRef<tbl_user>);
			OnCreated();
		}
		
		[Column(Storage="_phone_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int phone_id
		{
			get
			{
				return this._phone_id;
			}
			set
			{
				if ((this._phone_id != value))
				{
					this.Onphone_idChanging(value);
					this.SendPropertyChanging();
					this._phone_id = value;
					this.SendPropertyChanged("phone_id");
					this.Onphone_idChanged();
				}
			}
		}
		
		[Column(Storage="_user_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._tbl_user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[Column(Storage="_phone_number", DbType="VarChar(50)")]
		public string phone_number
		{
			get
			{
				return this._phone_number;
			}
			set
			{
				if ((this._phone_number != value))
				{
					this.Onphone_numberChanging(value);
					this.SendPropertyChanging();
					this._phone_number = value;
					this.SendPropertyChanged("phone_number");
					this.Onphone_numberChanged();
				}
			}
		}
		
		[Association(Name="tbl_user_tbl_phone", Storage="_tbl_user", ThisKey="user_id", IsForeignKey=true)]
		public tbl_user tbl_user
		{
			get
			{
				return this._tbl_user.Entity;
			}
			set
			{
				tbl_user previousValue = this._tbl_user.Entity;
				if (((previousValue != value) 
							|| (this._tbl_user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbl_user.Entity = null;
						previousValue.tbl_phones.Remove(this);
					}
					this._tbl_user.Entity = value;
					if ((value != null))
					{
						value.tbl_phones.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("tbl_user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tbl_user")]
	public partial class tbl_user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_id;
		
		private System.Data.Linq.Link<string> _first_name;
		
		private System.Data.Linq.Link<string> _last_name;
		
		private EntitySet<tbl_phone> _tbl_phones;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onfirst_nameChanging(string value);
    partial void Onfirst_nameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    #endregion
		
		public tbl_user()
		{
			this._tbl_phones = new EntitySet<tbl_phone>(new Action<tbl_phone>(this.attach_tbl_phones), new Action<tbl_phone>(this.detach_tbl_phones));
			OnCreated();
		}
		
		[Column(Storage="_user_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[Column(Storage="_first_name", DbType="VarChar(50)")]
		public string first_name
		{
			get
			{
				return this._first_name.Value;
			}
			set
			{
				if ((this._first_name.Value != value))
				{
					this.Onfirst_nameChanging(value);
					this.SendPropertyChanging();
					this._first_name.Value = value;
					this.SendPropertyChanged("first_name");
					this.Onfirst_nameChanged();
				}
			}
		}
		
		[Column(Storage="_last_name", DbType="VarChar(50)")]
		public string last_name
		{
			get
			{
				return this._last_name.Value;
			}
			set
			{
				if ((this._last_name.Value != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name.Value = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[Association(Name="tbl_user_tbl_phone", Storage="_tbl_phones", OtherKey="user_id")]
		public EntitySet<tbl_phone> tbl_phones
		{
			get
			{
				return this._tbl_phones;
			}
			set
			{
				this._tbl_phones.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbl_phones(tbl_phone entity)
		{
			this.SendPropertyChanging();
			entity.tbl_user = this;
		}
		
		private void detach_tbl_phones(tbl_phone entity)
		{
			this.SendPropertyChanging();
			entity.tbl_user = null;
		}
	}
}
#pragma warning restore 1591
