//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Worm.Designer
{
	/// <summary>
	/// DomainRelationship WormModelHasEntities
	/// Description for Worm.Designer.WormModelHasEntities
	/// </summary>
	[DslDesign::DisplayNameResource("Worm.Designer.WormModelHasEntities.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Worm.Designer.WormModelHasEntities.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3f154ba4-2f25-4df8-8b40-0675dbdcc663")]
	public partial class WormModelHasEntities : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// WormModelHasEntities domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3f154ba4, 0x2f25, 0x4df8, 0x8b, 0x40, 0x06, 0x75, 0xdb, 0xdc, 0xc6, 0x63);
	
				
		/// <summary>
		/// Constructor
		/// Creates a WormModelHasEntities link in the same Partition as the given WormModel
		/// </summary>
		/// <param name="source">WormModel to use as the source of the relationship.</param>
		/// <param name="target">Entity to use as the target of the relationship.</param>
		public WormModelHasEntities(WormModel source, Entity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(WormModelHasEntities.WormModelDomainRoleId, source), new DslModeling::RoleAssignment(WormModelHasEntities.EntityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public WormModelHasEntities(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public WormModelHasEntities(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public WormModelHasEntities(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public WormModelHasEntities(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region WormModel domain role code
		
		/// <summary>
		/// WormModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid WormModelDomainRoleId = new global::System.Guid(0x8a646f6a, 0xd1e4, 0x43e9, 0x87, 0xfc, 0x5e, 0xf1, 0x1b, 0x03, 0xe2, 0x13);
		
		/// <summary>
		/// DomainRole WormModel
		/// Description for Worm.Designer.WormModelHasEntities.WormModel
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.WormModelHasEntities/WormModel.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.WormModelHasEntities/WormModel.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Entities", PropertyDisplayNameKey="Worm.Designer.WormModelHasEntities/WormModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8a646f6a-d1e4-43e9-87fc-5ef11b03e213")]
		public virtual WormModel WormModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (WormModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, WormModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, WormModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access WormModel of a Entity
		/// <summary>
		/// Gets WormModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static WormModel GetWormModel(Entity element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EntityDomainRoleId) as WormModel;
		}
		
		/// <summary>
		/// Sets WormModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetWormModel(Entity element, WormModel newWormModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EntityDomainRoleId, newWormModel);
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0x8de3e6d9, 0x2399, 0x4f8c, 0xbe, 0x54, 0x99, 0x05, 0xb9, 0x4a, 0x7d, 0x2c);
		
		/// <summary>
		/// DomainRole Entity
		/// Description for Worm.Designer.WormModelHasEntities.Entity
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.WormModelHasEntities/Entity.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.WormModelHasEntities/Entity.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "WormModel", PropertyDisplayNameKey="Worm.Designer.WormModelHasEntities/Entity.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8de3e6d9-2399-4f8c-be54-9905b94a7d2c")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entities of a WormModel
		/// <summary>
		/// Gets a list of Entities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetEntities(WormModel element)
		{
			return new DslModeling::LinkedElementCollection<Entity>(element, WormModelDomainRoleId);
		}
		#endregion
		#region WormModel link accessor
		/// <summary>
		/// Get the list of WormModelHasEntities links to a WormModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Worm.Designer.WormModelHasEntities> GetLinksToEntities ( global::Worm.Designer.WormModel wormModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.WormModelHasEntities>(wormModelInstance, global::Worm.Designer.WormModelHasEntities.WormModelDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the WormModelHasEntities link to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Worm.Designer.WormModelHasEntities GetLinkToWormModel (global::Worm.Designer.Entity entityInstance)
		{
			global::System.Collections.Generic.IList<global::Worm.Designer.WormModelHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.WormModelHasEntities>(entityInstance, global::Worm.Designer.WormModelHasEntities.EntityDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Entity not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region WormModelHasEntities instance accessors
		
		/// <summary>
		/// Get any WormModelHasEntities links between a given WormModel and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Worm.Designer.WormModelHasEntities> GetLinks( global::Worm.Designer.WormModel source, global::Worm.Designer.Entity target )
		{
			global::System.Collections.Generic.List<global::Worm.Designer.WormModelHasEntities> outLinks = new global::System.Collections.Generic.List<global::Worm.Designer.WormModelHasEntities>();
			global::System.Collections.Generic.IList<global::Worm.Designer.WormModelHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.WormModelHasEntities>(source, global::Worm.Designer.WormModelHasEntities.WormModelDomainRoleId);
			foreach ( global::Worm.Designer.WormModelHasEntities link in links )
			{
				if ( target.Equals(link.Entity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one WormModelHasEntities link between a given WormModeland a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Worm.Designer.WormModelHasEntities GetLink( global::Worm.Designer.WormModel source, global::Worm.Designer.Entity target )
		{
			global::System.Collections.Generic.IList<global::Worm.Designer.WormModelHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.WormModelHasEntities>(source, global::Worm.Designer.WormModelHasEntities.WormModelDomainRoleId);
			foreach ( global::Worm.Designer.WormModelHasEntities link in links )
			{
				if ( target.Equals(link.Entity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Worm.Designer
{
	/// <summary>
	/// DomainRelationship EntityHasTables
	/// Description for Worm.Designer.EntityHasTables
	/// </summary>
	[DslDesign::DisplayNameResource("Worm.Designer.EntityHasTables.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Worm.Designer.EntityHasTables.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f86803b8-bf84-45dc-8ee2-7443df861052")]
	public partial class EntityHasTables : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasTables domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf86803b8, 0xbf84, 0x45dc, 0x8e, 0xe2, 0x74, 0x43, 0xdf, 0x86, 0x10, 0x52);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasTables link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Table to use as the target of the relationship.</param>
		public EntityHasTables(Entity source, Table target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasTables.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasTables.TableDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasTables(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasTables(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasTables(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasTables(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0xa188ebf0, 0x1dce, 0x4405, 0xb3, 0x55, 0x2d, 0xe9, 0x7a, 0x96, 0x03, 0xda);
		
		/// <summary>
		/// DomainRole Entity
		/// Description for Worm.Designer.EntityHasTables.Entity
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityHasTables/Entity.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityHasTables/Entity.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Tables", PropertyDisplayNameKey="Worm.Designer.EntityHasTables/Entity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a188ebf0-1dce-4405-b355-2de97a9603da")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a Table
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetEntity(Table element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TableDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(Table element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TableDomainRoleId, newEntity);
		}
		#endregion
		#region Table domain role code
		
		/// <summary>
		/// Table domain role Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainRoleId = new global::System.Guid(0xdb03c26a, 0x9456, 0x4f67, 0x8f, 0x06, 0x53, 0x84, 0x37, 0x7d, 0x2d, 0x98);
		
		/// <summary>
		/// DomainRole Table
		/// Description for Worm.Designer.EntityHasTables.Table
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityHasTables/Table.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityHasTables/Table.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="Worm.Designer.EntityHasTables/Table.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("db03c26a-9456-4f67-8f06-5384377d2d98")]
		public virtual Table Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Table)DslModeling::DomainRoleInfo.GetRolePlayer(this, TableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tables of a Entity
		/// <summary>
		/// Gets a list of Tables.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Table> GetTables(Entity element)
		{
			return new DslModeling::LinkedElementCollection<Table>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityHasTables links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Worm.Designer.EntityHasTables> GetLinksToTables ( global::Worm.Designer.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityHasTables>(entityInstance, global::Worm.Designer.EntityHasTables.EntityDomainRoleId);
		}
		#endregion
		#region Table link accessor
		/// <summary>
		/// Get the EntityHasTables link to a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Worm.Designer.EntityHasTables GetLinkToEntity (global::Worm.Designer.Table tableInstance)
		{
			global::System.Collections.Generic.IList<global::Worm.Designer.EntityHasTables> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityHasTables>(tableInstance, global::Worm.Designer.EntityHasTables.TableDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Table not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasTables instance accessors
		
		/// <summary>
		/// Get any EntityHasTables links between a given Entity and a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Worm.Designer.EntityHasTables> GetLinks( global::Worm.Designer.Entity source, global::Worm.Designer.Table target )
		{
			global::System.Collections.Generic.List<global::Worm.Designer.EntityHasTables> outLinks = new global::System.Collections.Generic.List<global::Worm.Designer.EntityHasTables>();
			global::System.Collections.Generic.IList<global::Worm.Designer.EntityHasTables> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityHasTables>(source, global::Worm.Designer.EntityHasTables.EntityDomainRoleId);
			foreach ( global::Worm.Designer.EntityHasTables link in links )
			{
				if ( target.Equals(link.Table) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasTables link between a given Entityand a Table.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Worm.Designer.EntityHasTables GetLink( global::Worm.Designer.Entity source, global::Worm.Designer.Table target )
		{
			global::System.Collections.Generic.IList<global::Worm.Designer.EntityHasTables> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityHasTables>(source, global::Worm.Designer.EntityHasTables.EntityDomainRoleId);
			foreach ( global::Worm.Designer.EntityHasTables link in links )
			{
				if ( target.Equals(link.Table) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Worm.Designer
{
	/// <summary>
	/// DomainRelationship EntityHasProperties
	/// Description for Worm.Designer.EntityHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("Worm.Designer.EntityHasProperties.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Worm.Designer.EntityHasProperties.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("372f6686-3fea-4da3-aedd-2a56af8723a4")]
	public partial class EntityHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x372f6686, 0x3fea, 0x4da3, 0xae, 0xdd, 0x2a, 0x56, 0xaf, 0x87, 0x23, 0xa4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasProperties link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public EntityHasProperties(Entity source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasProperties.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0x04d141e8, 0x2ed8, 0x431a, 0xaf, 0xba, 0xe2, 0x6d, 0xe5, 0xc2, 0xe3, 0x4b);
		
		/// <summary>
		/// DomainRole Entity
		/// Description for Worm.Designer.EntityHasProperties.Entity
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityHasProperties/Entity.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityHasProperties/Entity.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="Worm.Designer.EntityHasProperties/Entity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("04d141e8-2ed8-431a-afba-e26de5c2e34b")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a Property
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetEntity(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(Property element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newEntity);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0x08875147, 0x896c, 0x4b6d, 0x96, 0x0e, 0x1c, 0x6c, 0xaa, 0xc5, 0x2a, 0x0b);
		
		/// <summary>
		/// DomainRole Property
		/// Description for Worm.Designer.EntityHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityHasProperties/Property.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityHasProperties/Property.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="Worm.Designer.EntityHasProperties/Property.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("08875147-896c-4b6d-960e-1c6caac52a0b")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a Entity
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(Entity element)
		{
			return new DslModeling::LinkedElementCollection<Property>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityHasProperties links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Worm.Designer.EntityHasProperties> GetLinksToProperties ( global::Worm.Designer.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityHasProperties>(entityInstance, global::Worm.Designer.EntityHasProperties.EntityDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the EntityHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Worm.Designer.EntityHasProperties GetLinkToEntity (global::Worm.Designer.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::Worm.Designer.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityHasProperties>(propertyInstance, global::Worm.Designer.EntityHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasProperties instance accessors
		
		/// <summary>
		/// Get any EntityHasProperties links between a given Entity and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Worm.Designer.EntityHasProperties> GetLinks( global::Worm.Designer.Entity source, global::Worm.Designer.Property target )
		{
			global::System.Collections.Generic.List<global::Worm.Designer.EntityHasProperties> outLinks = new global::System.Collections.Generic.List<global::Worm.Designer.EntityHasProperties>();
			global::System.Collections.Generic.IList<global::Worm.Designer.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityHasProperties>(source, global::Worm.Designer.EntityHasProperties.EntityDomainRoleId);
			foreach ( global::Worm.Designer.EntityHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasProperties link between a given Entityand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Worm.Designer.EntityHasProperties GetLink( global::Worm.Designer.Entity source, global::Worm.Designer.Property target )
		{
			global::System.Collections.Generic.IList<global::Worm.Designer.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityHasProperties>(source, global::Worm.Designer.EntityHasProperties.EntityDomainRoleId);
			foreach ( global::Worm.Designer.EntityHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Worm.Designer
{
	/// <summary>
	/// DomainRelationship EntityReferencesTargetEntities
	/// Description for Worm.Designer.EntityReferencesTargetEntities
	/// </summary>
	[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesTargetEntities.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesTargetEntities.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c0c83bed-1d6c-46fc-97ed-b723d83d36fc")]
	public partial class EntityReferencesTargetEntities : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityReferencesTargetEntities domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc0c83bed, 0x1d6c, 0x46fc, 0x97, 0xed, 0xb7, 0x23, 0xd8, 0x3d, 0x36, 0xfc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityReferencesTargetEntities link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Entity to use as the target of the relationship.</param>
		public EntityReferencesTargetEntities(Entity source, Entity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityReferencesTargetEntities.SourceEntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityReferencesTargetEntities.TargetEntityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityReferencesTargetEntities(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityReferencesTargetEntities(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityReferencesTargetEntities(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityReferencesTargetEntities(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceEntity domain role code
		
		/// <summary>
		/// SourceEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceEntityDomainRoleId = new global::System.Guid(0x88046d41, 0x3c77, 0x4ee6, 0x8b, 0x96, 0x77, 0xbf, 0x9f, 0xdd, 0x46, 0x44);
		
		/// <summary>
		/// DomainRole SourceEntity
		/// Description for Worm.Designer.EntityReferencesTargetEntities.SourceEntity
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesTargetEntities/SourceEntity.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesTargetEntities/SourceEntity.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetEntities", PropertyDisplayNameKey="Worm.Designer.EntityReferencesTargetEntities/SourceEntity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("88046d41-3c77-4ee6-8b96-77bf9fdd4644")]
		public virtual Entity SourceEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceEntities of a Entity
		/// <summary>
		/// Gets a list of SourceEntities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetSourceEntities(Entity element)
		{
			return new DslModeling::LinkedElementCollection<Entity>(element, TargetEntityDomainRoleId);
		}
		#endregion
		#region TargetEntity domain role code
		
		/// <summary>
		/// TargetEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetEntityDomainRoleId = new global::System.Guid(0x484c3fcf, 0x49d8, 0x43a2, 0x9e, 0x75, 0x57, 0x2a, 0xa4, 0x75, 0x82, 0x96);
		
		/// <summary>
		/// DomainRole TargetEntity
		/// Description for Worm.Designer.EntityReferencesTargetEntities.TargetEntity
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesTargetEntities/TargetEntity.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesTargetEntities/TargetEntity.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceEntities", PropertyDisplayNameKey="Worm.Designer.EntityReferencesTargetEntities/TargetEntity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("484c3fcf-49d8-43a2-9e75-572aa4758296")]
		public virtual Entity TargetEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetEntities of a Entity
		/// <summary>
		/// Gets a list of TargetEntities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetTargetEntities(Entity element)
		{
			return new DslModeling::LinkedElementCollection<Entity>(element, SourceEntityDomainRoleId);
		}
		#endregion
		#region UndelyingEntity domain property code
		
		/// <summary>
		/// UndelyingEntity domain property Id.
		/// </summary>
		public static readonly global::System.Guid UndelyingEntityDomainPropertyId = new global::System.Guid(0x6bd17a24, 0xe3bd, 0x4412, 0xa6, 0xc6, 0x2c, 0x00, 0xb7, 0x82, 0x46, 0x78);
		
		/// <summary>
		/// Storage for UndelyingEntity
		/// </summary>
		private global::System.String undelyingEntityPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of UndelyingEntity domain property.
		/// Description for Worm.Designer.EntityReferencesTargetEntities.Undelying entity
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesTargetEntities/UndelyingEntity.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesTargetEntities/UndelyingEntity.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6bd17a24-e3bd-4412-a6c6-2c00b7824678")]
		public global::System.String UndelyingEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return undelyingEntityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UndelyingEntityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesTargetEntities.UndelyingEntity domain property.
		/// </summary>
		internal sealed partial class UndelyingEntityPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesTargetEntities, global::System.String>
		{
			private UndelyingEntityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesTargetEntities.UndelyingEntity domain property value handler.
			/// </summary>
			public static readonly UndelyingEntityPropertyHandler Instance = new UndelyingEntityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesTargetEntities.UndelyingEntity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UndelyingEntityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityReferencesTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.undelyingEntityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesTargetEntities element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.undelyingEntityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region LeftCascadeDelete domain property code
		
		/// <summary>
		/// LeftCascadeDelete domain property Id.
		/// </summary>
		public static readonly global::System.Guid LeftCascadeDeleteDomainPropertyId = new global::System.Guid(0xecd23e88, 0x6e56, 0x438b, 0x9f, 0x10, 0xc5, 0x6c, 0x1a, 0xba, 0x7c, 0xbf);
		
		/// <summary>
		/// Storage for LeftCascadeDelete
		/// </summary>
		private global::System.Boolean leftCascadeDeletePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of LeftCascadeDelete domain property.
		/// Description for Worm.Designer.EntityReferencesTargetEntities.Left Cascade Delete
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesTargetEntities/LeftCascadeDelete.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesTargetEntities/LeftCascadeDelete.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ecd23e88-6e56-438b-9f10-c56c1aba7cbf")]
		public global::System.Boolean LeftCascadeDelete
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return leftCascadeDeletePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LeftCascadeDeletePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesTargetEntities.LeftCascadeDelete domain property.
		/// </summary>
		internal sealed partial class LeftCascadeDeletePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesTargetEntities, global::System.Boolean>
		{
			private LeftCascadeDeletePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesTargetEntities.LeftCascadeDelete domain property value handler.
			/// </summary>
			public static readonly LeftCascadeDeletePropertyHandler Instance = new LeftCascadeDeletePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesTargetEntities.LeftCascadeDelete domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LeftCascadeDeleteDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityReferencesTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.leftCascadeDeletePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesTargetEntities element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.leftCascadeDeletePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region LeftFieldName domain property code
		
		/// <summary>
		/// LeftFieldName domain property Id.
		/// </summary>
		public static readonly global::System.Guid LeftFieldNameDomainPropertyId = new global::System.Guid(0xec48a8e3, 0xf1b3, 0x4c88, 0xbb, 0xd4, 0x64, 0x44, 0x51, 0xce, 0x13, 0xb0);
		
		/// <summary>
		/// Storage for LeftFieldName
		/// </summary>
		private global::System.String leftFieldNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of LeftFieldName domain property.
		/// Description for Worm.Designer.EntityReferencesTargetEntities.Left Field Name
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesTargetEntities/LeftFieldName.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesTargetEntities/LeftFieldName.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ec48a8e3-f1b3-4c88-bbd4-644451ce13b0")]
		public global::System.String LeftFieldName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return leftFieldNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LeftFieldNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesTargetEntities.LeftFieldName domain property.
		/// </summary>
		internal sealed partial class LeftFieldNamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesTargetEntities, global::System.String>
		{
			private LeftFieldNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesTargetEntities.LeftFieldName domain property value handler.
			/// </summary>
			public static readonly LeftFieldNamePropertyHandler Instance = new LeftFieldNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesTargetEntities.LeftFieldName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LeftFieldNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityReferencesTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.leftFieldNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesTargetEntities element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.leftFieldNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region LeftAccessorName domain property code
		
		/// <summary>
		/// LeftAccessorName domain property Id.
		/// </summary>
		public static readonly global::System.Guid LeftAccessorNameDomainPropertyId = new global::System.Guid(0x3bf5da1c, 0x8e83, 0x42ab, 0x81, 0x79, 0x77, 0x19, 0x47, 0x58, 0xfb, 0xaf);
		
		/// <summary>
		/// Storage for LeftAccessorName
		/// </summary>
		private global::System.String leftAccessorNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of LeftAccessorName domain property.
		/// Description for Worm.Designer.EntityReferencesTargetEntities.Left Accessor Name
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesTargetEntities/LeftAccessorName.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesTargetEntities/LeftAccessorName.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3bf5da1c-8e83-42ab-8179-77194758fbaf")]
		public global::System.String LeftAccessorName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return leftAccessorNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LeftAccessorNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesTargetEntities.LeftAccessorName domain property.
		/// </summary>
		internal sealed partial class LeftAccessorNamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesTargetEntities, global::System.String>
		{
			private LeftAccessorNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesTargetEntities.LeftAccessorName domain property value handler.
			/// </summary>
			public static readonly LeftAccessorNamePropertyHandler Instance = new LeftAccessorNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesTargetEntities.LeftAccessorName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LeftAccessorNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityReferencesTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.leftAccessorNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesTargetEntities element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.leftAccessorNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Disabled domain property code
		
		/// <summary>
		/// Disabled domain property Id.
		/// </summary>
		public static readonly global::System.Guid DisabledDomainPropertyId = new global::System.Guid(0x8c000c96, 0x92a2, 0x4eeb, 0x87, 0x1b, 0xa0, 0x9f, 0xd6, 0xa2, 0xe1, 0x0d);
		
		/// <summary>
		/// Storage for Disabled
		/// </summary>
		private global::System.Boolean disabledPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Disabled domain property.
		/// Description for Worm.Designer.EntityReferencesTargetEntities.Disabled
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesTargetEntities/Disabled.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesTargetEntities/Disabled.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8c000c96-92a2-4eeb-871b-a09fd6a2e10d")]
		public global::System.Boolean Disabled
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return disabledPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DisabledPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesTargetEntities.Disabled domain property.
		/// </summary>
		internal sealed partial class DisabledPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesTargetEntities, global::System.Boolean>
		{
			private DisabledPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesTargetEntities.Disabled domain property value handler.
			/// </summary>
			public static readonly DisabledPropertyHandler Instance = new DisabledPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesTargetEntities.Disabled domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DisabledDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityReferencesTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.disabledPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesTargetEntities element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.disabledPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Table domain property code
		
		/// <summary>
		/// Table domain property Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainPropertyId = new global::System.Guid(0x202b0d26, 0xd30c, 0x4a1f, 0x96, 0xf1, 0x0b, 0x6b, 0xdb, 0xce, 0x7d, 0xb3);
		
		/// <summary>
		/// Storage for Table
		/// </summary>
		private global::System.String tablePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Table domain property.
		/// Description for Worm.Designer.EntityReferencesTargetEntities.Table
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesTargetEntities/Table.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesTargetEntities/Table.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("202b0d26-d30c-4a1f-96f1-0b6bdbce7db3")]
		public global::System.String Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesTargetEntities.Table domain property.
		/// </summary>
		internal sealed partial class TablePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesTargetEntities, global::System.String>
		{
			private TablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesTargetEntities.Table domain property value handler.
			/// </summary>
			public static readonly TablePropertyHandler Instance = new TablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesTargetEntities.Table domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityReferencesTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tablePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesTargetEntities element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region LeftEntity domain property code
		
		/// <summary>
		/// LeftEntity domain property Id.
		/// </summary>
		public static readonly global::System.Guid LeftEntityDomainPropertyId = new global::System.Guid(0x845e0f02, 0xed94, 0x402a, 0xb0, 0x87, 0xc9, 0xf0, 0x5a, 0x71, 0xb9, 0xbc);
		
		/// <summary>
		/// Storage for LeftEntity
		/// </summary>
		private global::System.String leftEntityPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of LeftEntity domain property.
		/// Description for Worm.Designer.EntityReferencesTargetEntities.Left Entity
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesTargetEntities/LeftEntity.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesTargetEntities/LeftEntity.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("845e0f02-ed94-402a-b087-c9f05a71b9bc")]
		public global::System.String LeftEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return leftEntityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LeftEntityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesTargetEntities.LeftEntity domain property.
		/// </summary>
		internal sealed partial class LeftEntityPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesTargetEntities, global::System.String>
		{
			private LeftEntityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesTargetEntities.LeftEntity domain property value handler.
			/// </summary>
			public static readonly LeftEntityPropertyHandler Instance = new LeftEntityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesTargetEntities.LeftEntity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LeftEntityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityReferencesTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.leftEntityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesTargetEntities element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.leftEntityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region LeftAccessedEntityType domain property code
		
		/// <summary>
		/// LeftAccessedEntityType domain property Id.
		/// </summary>
		public static readonly global::System.Guid LeftAccessedEntityTypeDomainPropertyId = new global::System.Guid(0x880ca553, 0xe244, 0x4497, 0xb3, 0x80, 0xe1, 0x44, 0x52, 0x19, 0xbf, 0x73);
		
		/// <summary>
		/// Storage for LeftAccessedEntityType
		/// </summary>
		private global::System.String leftAccessedEntityTypePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of LeftAccessedEntityType domain property.
		/// Description for Worm.Designer.EntityReferencesTargetEntities.Left Accessed
		/// Entity Type
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesTargetEntities/LeftAccessedEntityType.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesTargetEntities/LeftAccessedEntityType.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("880ca553-e244-4497-b380-e1445219bf73")]
		public global::System.String LeftAccessedEntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return leftAccessedEntityTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LeftAccessedEntityTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesTargetEntities.LeftAccessedEntityType domain property.
		/// </summary>
		internal sealed partial class LeftAccessedEntityTypePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesTargetEntities, global::System.String>
		{
			private LeftAccessedEntityTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesTargetEntities.LeftAccessedEntityType domain property value handler.
			/// </summary>
			public static readonly LeftAccessedEntityTypePropertyHandler Instance = new LeftAccessedEntityTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesTargetEntities.LeftAccessedEntityType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LeftAccessedEntityTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityReferencesTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.leftAccessedEntityTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesTargetEntities element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.leftAccessedEntityTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RightAccessedEntityType domain property code
		
		/// <summary>
		/// RightAccessedEntityType domain property Id.
		/// </summary>
		public static readonly global::System.Guid RightAccessedEntityTypeDomainPropertyId = new global::System.Guid(0x2c3390fd, 0x432a, 0x4268, 0x96, 0xf7, 0x4f, 0x88, 0x59, 0xd7, 0x4b, 0x96);
		
		/// <summary>
		/// Storage for RightAccessedEntityType
		/// </summary>
		private global::System.String rightAccessedEntityTypePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RightAccessedEntityType domain property.
		/// Description for Worm.Designer.EntityReferencesTargetEntities.Right Accessed
		/// Entity Type
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesTargetEntities/RightAccessedEntityType.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesTargetEntities/RightAccessedEntityType.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2c3390fd-432a-4268-96f7-4f8859d74b96")]
		public global::System.String RightAccessedEntityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return rightAccessedEntityTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RightAccessedEntityTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesTargetEntities.RightAccessedEntityType domain property.
		/// </summary>
		internal sealed partial class RightAccessedEntityTypePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesTargetEntities, global::System.String>
		{
			private RightAccessedEntityTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesTargetEntities.RightAccessedEntityType domain property value handler.
			/// </summary>
			public static readonly RightAccessedEntityTypePropertyHandler Instance = new RightAccessedEntityTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesTargetEntities.RightAccessedEntityType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RightAccessedEntityTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityReferencesTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.rightAccessedEntityTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesTargetEntities element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.rightAccessedEntityTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RightFieldName domain property code
		
		/// <summary>
		/// RightFieldName domain property Id.
		/// </summary>
		public static readonly global::System.Guid RightFieldNameDomainPropertyId = new global::System.Guid(0x2e71233d, 0xd194, 0x4929, 0xbb, 0xb4, 0x27, 0xcf, 0x3a, 0xe1, 0xd3, 0x89);
		
		/// <summary>
		/// Storage for RightFieldName
		/// </summary>
		private global::System.String rightFieldNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RightFieldName domain property.
		/// Description for Worm.Designer.EntityReferencesTargetEntities.Right Field Name
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesTargetEntities/RightFieldName.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesTargetEntities/RightFieldName.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2e71233d-d194-4929-bbb4-27cf3ae1d389")]
		public global::System.String RightFieldName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return rightFieldNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RightFieldNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesTargetEntities.RightFieldName domain property.
		/// </summary>
		internal sealed partial class RightFieldNamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesTargetEntities, global::System.String>
		{
			private RightFieldNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesTargetEntities.RightFieldName domain property value handler.
			/// </summary>
			public static readonly RightFieldNamePropertyHandler Instance = new RightFieldNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesTargetEntities.RightFieldName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RightFieldNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityReferencesTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.rightFieldNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesTargetEntities element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.rightFieldNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RightCascadeDelete domain property code
		
		/// <summary>
		/// RightCascadeDelete domain property Id.
		/// </summary>
		public static readonly global::System.Guid RightCascadeDeleteDomainPropertyId = new global::System.Guid(0x7c7b3972, 0x2e7d, 0x4b2c, 0xbe, 0xe9, 0x49, 0xcb, 0x3c, 0x2d, 0x87, 0x42);
		
		/// <summary>
		/// Storage for RightCascadeDelete
		/// </summary>
		private global::System.Boolean rightCascadeDeletePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of RightCascadeDelete domain property.
		/// Description for Worm.Designer.EntityReferencesTargetEntities.Right Cascade
		/// Delete
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesTargetEntities/RightCascadeDelete.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesTargetEntities/RightCascadeDelete.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7c7b3972-2e7d-4b2c-bee9-49cb3c2d8742")]
		public global::System.Boolean RightCascadeDelete
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return rightCascadeDeletePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RightCascadeDeletePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesTargetEntities.RightCascadeDelete domain property.
		/// </summary>
		internal sealed partial class RightCascadeDeletePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesTargetEntities, global::System.Boolean>
		{
			private RightCascadeDeletePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesTargetEntities.RightCascadeDelete domain property value handler.
			/// </summary>
			public static readonly RightCascadeDeletePropertyHandler Instance = new RightCascadeDeletePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesTargetEntities.RightCascadeDelete domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RightCascadeDeleteDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityReferencesTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.rightCascadeDeletePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesTargetEntities element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.rightCascadeDeletePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RightAccessorName domain property code
		
		/// <summary>
		/// RightAccessorName domain property Id.
		/// </summary>
		public static readonly global::System.Guid RightAccessorNameDomainPropertyId = new global::System.Guid(0xef1396f8, 0x92b2, 0x4af5, 0xbf, 0x2f, 0x7d, 0xf3, 0x9c, 0xc0, 0x3e, 0x01);
		
		/// <summary>
		/// Storage for RightAccessorName
		/// </summary>
		private global::System.String rightAccessorNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RightAccessorName domain property.
		/// Description for Worm.Designer.EntityReferencesTargetEntities.Right Accessor Name
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesTargetEntities/RightAccessorName.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesTargetEntities/RightAccessorName.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ef1396f8-92b2-4af5-bf2f-7df39cc03e01")]
		public global::System.String RightAccessorName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return rightAccessorNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RightAccessorNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesTargetEntities.RightAccessorName domain property.
		/// </summary>
		internal sealed partial class RightAccessorNamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesTargetEntities, global::System.String>
		{
			private RightAccessorNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesTargetEntities.RightAccessorName domain property value handler.
			/// </summary>
			public static readonly RightAccessorNamePropertyHandler Instance = new RightAccessorNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesTargetEntities.RightAccessorName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RightAccessorNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityReferencesTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.rightAccessorNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesTargetEntities element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.rightAccessorNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RightEntity domain property code
		
		/// <summary>
		/// RightEntity domain property Id.
		/// </summary>
		public static readonly global::System.Guid RightEntityDomainPropertyId = new global::System.Guid(0x25351206, 0x2764, 0x46dc, 0x8c, 0xb2, 0xb7, 0x93, 0x2c, 0x34, 0xda, 0x59);
		
		/// <summary>
		/// Storage for RightEntity
		/// </summary>
		private global::System.String rightEntityPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RightEntity domain property.
		/// Description for Worm.Designer.EntityReferencesTargetEntities.Right Entity
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesTargetEntities/RightEntity.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesTargetEntities/RightEntity.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("25351206-2764-46dc-8cb2-b7932c34da59")]
		public global::System.String RightEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return rightEntityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RightEntityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesTargetEntities.RightEntity domain property.
		/// </summary>
		internal sealed partial class RightEntityPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesTargetEntities, global::System.String>
		{
			private RightEntityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesTargetEntities.RightEntity domain property value handler.
			/// </summary>
			public static readonly RightEntityPropertyHandler Instance = new RightEntityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesTargetEntities.RightEntity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RightEntityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityReferencesTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.rightEntityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesTargetEntities element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.rightEntityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceEntity link accessor
		/// <summary>
		/// Get the list of EntityReferencesTargetEntities links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Worm.Designer.EntityReferencesTargetEntities> GetLinksToTargetEntities ( global::Worm.Designer.Entity sourceEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityReferencesTargetEntities>(sourceEntityInstance, global::Worm.Designer.EntityReferencesTargetEntities.SourceEntityDomainRoleId);
		}
		#endregion
		#region TargetEntity link accessor
		/// <summary>
		/// Get the list of EntityReferencesTargetEntities links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Worm.Designer.EntityReferencesTargetEntities> GetLinksToSourceEntities ( global::Worm.Designer.Entity targetEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityReferencesTargetEntities>(targetEntityInstance, global::Worm.Designer.EntityReferencesTargetEntities.TargetEntityDomainRoleId);
		}
		#endregion
		#region EntityReferencesTargetEntities instance accessors
		
		/// <summary>
		/// Get any EntityReferencesTargetEntities links between a given Entity and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Worm.Designer.EntityReferencesTargetEntities> GetLinks( global::Worm.Designer.Entity source, global::Worm.Designer.Entity target )
		{
			global::System.Collections.Generic.List<global::Worm.Designer.EntityReferencesTargetEntities> outLinks = new global::System.Collections.Generic.List<global::Worm.Designer.EntityReferencesTargetEntities>();
			global::System.Collections.Generic.IList<global::Worm.Designer.EntityReferencesTargetEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityReferencesTargetEntities>(source, global::Worm.Designer.EntityReferencesTargetEntities.SourceEntityDomainRoleId);
			foreach ( global::Worm.Designer.EntityReferencesTargetEntities link in links )
			{
				if ( target.Equals(link.TargetEntity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityReferencesTargetEntities link between a given Entityand a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Worm.Designer.EntityReferencesTargetEntities GetLink( global::Worm.Designer.Entity source, global::Worm.Designer.Entity target )
		{
			global::System.Collections.Generic.IList<global::Worm.Designer.EntityReferencesTargetEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityReferencesTargetEntities>(source, global::Worm.Designer.EntityReferencesTargetEntities.SourceEntityDomainRoleId);
			foreach ( global::Worm.Designer.EntityReferencesTargetEntities link in links )
			{
				if ( target.Equals(link.TargetEntity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Worm.Designer
{
	/// <summary>
	/// DomainRelationship EntityHasSupressedProperties
	/// Description for Worm.Designer.EntityHasSupressedProperties
	/// </summary>
	[DslDesign::DisplayNameResource("Worm.Designer.EntityHasSupressedProperties.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Worm.Designer.EntityHasSupressedProperties.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6a934d4c-a2a5-447c-92d5-08ee15072542")]
	public partial class EntityHasSupressedProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasSupressedProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6a934d4c, 0xa2a5, 0x447c, 0x92, 0xd5, 0x08, 0xee, 0x15, 0x07, 0x25, 0x42);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasSupressedProperties link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">SupressedProperty to use as the target of the relationship.</param>
		public EntityHasSupressedProperties(Entity source, SupressedProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasSupressedProperties.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasSupressedProperties.SupressedPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasSupressedProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasSupressedProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasSupressedProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasSupressedProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0x179f911a, 0x4814, 0x40bc, 0xb3, 0xbd, 0x60, 0xeb, 0x62, 0x9a, 0x81, 0x4f);
		
		/// <summary>
		/// DomainRole Entity
		/// Description for Worm.Designer.EntityHasSupressedProperties.Entity
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityHasSupressedProperties/Entity.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityHasSupressedProperties/Entity.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SupressedProperties", PropertyDisplayNameKey="Worm.Designer.EntityHasSupressedProperties/Entity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("179f911a-4814-40bc-b3bd-60eb629a814f")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a SupressedProperty
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetEntity(SupressedProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SupressedPropertyDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(SupressedProperty element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SupressedPropertyDomainRoleId, newEntity);
		}
		#endregion
		#region SupressedProperty domain role code
		
		/// <summary>
		/// SupressedProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid SupressedPropertyDomainRoleId = new global::System.Guid(0xfa36bfe0, 0xf9fe, 0x48d7, 0xab, 0x78, 0x69, 0xae, 0x22, 0x77, 0x4b, 0xea);
		
		/// <summary>
		/// DomainRole SupressedProperty
		/// Description for Worm.Designer.EntityHasSupressedProperties.SupressedProperty
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityHasSupressedProperties/SupressedProperty.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityHasSupressedProperties/SupressedProperty.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="Worm.Designer.EntityHasSupressedProperties/SupressedProperty.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("fa36bfe0-f9fe-48d7-ab78-69ae22774bea")]
		public virtual SupressedProperty SupressedProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SupressedProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, SupressedPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SupressedPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SupressedProperties of a Entity
		/// <summary>
		/// Gets a list of SupressedProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SupressedProperty> GetSupressedProperties(Entity element)
		{
			return new DslModeling::LinkedElementCollection<SupressedProperty>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityHasSupressedProperties links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Worm.Designer.EntityHasSupressedProperties> GetLinksToSupressedProperties ( global::Worm.Designer.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityHasSupressedProperties>(entityInstance, global::Worm.Designer.EntityHasSupressedProperties.EntityDomainRoleId);
		}
		#endregion
		#region SupressedProperty link accessor
		/// <summary>
		/// Get the EntityHasSupressedProperties link to a SupressedProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Worm.Designer.EntityHasSupressedProperties GetLinkToEntity (global::Worm.Designer.SupressedProperty supressedPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::Worm.Designer.EntityHasSupressedProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityHasSupressedProperties>(supressedPropertyInstance, global::Worm.Designer.EntityHasSupressedProperties.SupressedPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SupressedProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasSupressedProperties instance accessors
		
		/// <summary>
		/// Get any EntityHasSupressedProperties links between a given Entity and a SupressedProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Worm.Designer.EntityHasSupressedProperties> GetLinks( global::Worm.Designer.Entity source, global::Worm.Designer.SupressedProperty target )
		{
			global::System.Collections.Generic.List<global::Worm.Designer.EntityHasSupressedProperties> outLinks = new global::System.Collections.Generic.List<global::Worm.Designer.EntityHasSupressedProperties>();
			global::System.Collections.Generic.IList<global::Worm.Designer.EntityHasSupressedProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityHasSupressedProperties>(source, global::Worm.Designer.EntityHasSupressedProperties.EntityDomainRoleId);
			foreach ( global::Worm.Designer.EntityHasSupressedProperties link in links )
			{
				if ( target.Equals(link.SupressedProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasSupressedProperties link between a given Entityand a SupressedProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Worm.Designer.EntityHasSupressedProperties GetLink( global::Worm.Designer.Entity source, global::Worm.Designer.SupressedProperty target )
		{
			global::System.Collections.Generic.IList<global::Worm.Designer.EntityHasSupressedProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityHasSupressedProperties>(source, global::Worm.Designer.EntityHasSupressedProperties.EntityDomainRoleId);
			foreach ( global::Worm.Designer.EntityHasSupressedProperties link in links )
			{
				if ( target.Equals(link.SupressedProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Worm.Designer
{
	/// <summary>
	/// DomainRelationship EntityReferencesSelfTargetEntities
	/// Description for Worm.Designer.EntityReferencesSelfTargetEntities
	/// </summary>
	[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesSelfTargetEntities.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesSelfTargetEntities.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d4b8b7b2-7579-4a08-8ed5-8b59567ee4ae")]
	public partial class EntityReferencesSelfTargetEntities : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityReferencesSelfTargetEntities domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd4b8b7b2, 0x7579, 0x4a08, 0x8e, 0xd5, 0x8b, 0x59, 0x56, 0x7e, 0xe4, 0xae);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityReferencesSelfTargetEntities link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Entity to use as the target of the relationship.</param>
		public EntityReferencesSelfTargetEntities(Entity source, Entity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityReferencesSelfTargetEntities.SelfSourceEntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityReferencesSelfTargetEntities.SelfTargetEntityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityReferencesSelfTargetEntities(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityReferencesSelfTargetEntities(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityReferencesSelfTargetEntities(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityReferencesSelfTargetEntities(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SelfSourceEntity domain role code
		
		/// <summary>
		/// SelfSourceEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid SelfSourceEntityDomainRoleId = new global::System.Guid(0xa3d10102, 0xc8f5, 0x4e6a, 0x9f, 0xd7, 0xbe, 0xac, 0x49, 0x43, 0xe1, 0xe2);
		
		/// <summary>
		/// DomainRole SelfSourceEntity
		/// Description for
		/// Worm.Designer.EntityReferencesSelfTargetEntities.SelfSourceEntity
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesSelfTargetEntities/SelfSourceEntity.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesSelfTargetEntities/SelfSourceEntity.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SelfTargetEntities", PropertyDisplayNameKey="Worm.Designer.EntityReferencesSelfTargetEntities/SelfSourceEntity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a3d10102-c8f5-4e6a-9fd7-beac4943e1e2")]
		public virtual Entity SelfSourceEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, SelfSourceEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SelfSourceEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SelfSourceEntities of a Entity
		/// <summary>
		/// Gets a list of SelfSourceEntities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetSelfSourceEntities(Entity element)
		{
			return new DslModeling::LinkedElementCollection<Entity>(element, SelfTargetEntityDomainRoleId);
		}
		#endregion
		#region SelfTargetEntity domain role code
		
		/// <summary>
		/// SelfTargetEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid SelfTargetEntityDomainRoleId = new global::System.Guid(0x1bd6d634, 0x62dc, 0x4d98, 0x9d, 0x42, 0x8c, 0x4e, 0xc5, 0x93, 0x56, 0xc3);
		
		/// <summary>
		/// DomainRole SelfTargetEntity
		/// Description for
		/// Worm.Designer.EntityReferencesSelfTargetEntities.SelfTargetEntity
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesSelfTargetEntities/SelfTargetEntity.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesSelfTargetEntities/SelfTargetEntity.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SelfSourceEntities", PropertyDisplayNameKey="Worm.Designer.EntityReferencesSelfTargetEntities/SelfTargetEntity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1bd6d634-62dc-4d98-9d42-8c4ec59356c3")]
		public virtual Entity SelfTargetEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, SelfTargetEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SelfTargetEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SelfTargetEntities of a Entity
		/// <summary>
		/// Gets a list of SelfTargetEntities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetSelfTargetEntities(Entity element)
		{
			return new DslModeling::LinkedElementCollection<Entity>(element, SelfSourceEntityDomainRoleId);
		}
		#endregion
		#region DirectFieldName domain property code
		
		/// <summary>
		/// DirectFieldName domain property Id.
		/// </summary>
		public static readonly global::System.Guid DirectFieldNameDomainPropertyId = new global::System.Guid(0xd817536f, 0x07ca, 0x433f, 0xb4, 0x79, 0x44, 0x22, 0x4d, 0x99, 0x5b, 0x0e);
		
		/// <summary>
		/// Storage for DirectFieldName
		/// </summary>
		private global::System.String directFieldNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DirectFieldName domain property.
		/// Description for Worm.Designer.EntityReferencesSelfTargetEntities.Direct Field
		/// Name
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesSelfTargetEntities/DirectFieldName.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesSelfTargetEntities/DirectFieldName.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d817536f-07ca-433f-b479-44224d995b0e")]
		public global::System.String DirectFieldName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return directFieldNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DirectFieldNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesSelfTargetEntities.DirectFieldName domain property.
		/// </summary>
		internal sealed partial class DirectFieldNamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesSelfTargetEntities, global::System.String>
		{
			private DirectFieldNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesSelfTargetEntities.DirectFieldName domain property value handler.
			/// </summary>
			public static readonly DirectFieldNamePropertyHandler Instance = new DirectFieldNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesSelfTargetEntities.DirectFieldName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DirectFieldNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityReferencesSelfTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.directFieldNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesSelfTargetEntities element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.directFieldNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DirectAccessor domain property code
		
		/// <summary>
		/// DirectAccessor domain property Id.
		/// </summary>
		public static readonly global::System.Guid DirectAccessorDomainPropertyId = new global::System.Guid(0x12cf3bf5, 0xcb38, 0x4cd6, 0xb4, 0x83, 0x3d, 0xcd, 0xff, 0x9b, 0xae, 0x85);
		
		/// <summary>
		/// Storage for DirectAccessor
		/// </summary>
		private global::System.String directAccessorPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DirectAccessor domain property.
		/// Description for Worm.Designer.EntityReferencesSelfTargetEntities.Direct Accessor
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesSelfTargetEntities/DirectAccessor.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesSelfTargetEntities/DirectAccessor.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("12cf3bf5-cb38-4cd6-b483-3dcdff9bae85")]
		public global::System.String DirectAccessor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return directAccessorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DirectAccessorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesSelfTargetEntities.DirectAccessor domain property.
		/// </summary>
		internal sealed partial class DirectAccessorPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesSelfTargetEntities, global::System.String>
		{
			private DirectAccessorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesSelfTargetEntities.DirectAccessor domain property value handler.
			/// </summary>
			public static readonly DirectAccessorPropertyHandler Instance = new DirectAccessorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesSelfTargetEntities.DirectAccessor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DirectAccessorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityReferencesSelfTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.directAccessorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesSelfTargetEntities element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.directAccessorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DirectCascadeDelete domain property code
		
		/// <summary>
		/// DirectCascadeDelete domain property Id.
		/// </summary>
		public static readonly global::System.Guid DirectCascadeDeleteDomainPropertyId = new global::System.Guid(0x3042c498, 0x34d4, 0x499c, 0xb1, 0x84, 0xd5, 0xc7, 0xc6, 0xa0, 0xd2, 0x94);
		
		/// <summary>
		/// Storage for DirectCascadeDelete
		/// </summary>
		private global::System.Boolean directCascadeDeletePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DirectCascadeDelete domain property.
		/// Description for Worm.Designer.EntityReferencesSelfTargetEntities.Direct Cascade
		/// Delete
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesSelfTargetEntities/DirectCascadeDelete.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesSelfTargetEntities/DirectCascadeDelete.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3042c498-34d4-499c-b184-d5c7c6a0d294")]
		public global::System.Boolean DirectCascadeDelete
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return directCascadeDeletePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DirectCascadeDeletePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesSelfTargetEntities.DirectCascadeDelete domain property.
		/// </summary>
		internal sealed partial class DirectCascadeDeletePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesSelfTargetEntities, global::System.Boolean>
		{
			private DirectCascadeDeletePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesSelfTargetEntities.DirectCascadeDelete domain property value handler.
			/// </summary>
			public static readonly DirectCascadeDeletePropertyHandler Instance = new DirectCascadeDeletePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesSelfTargetEntities.DirectCascadeDelete domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DirectCascadeDeleteDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityReferencesSelfTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.directCascadeDeletePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesSelfTargetEntities element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.directCascadeDeletePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReverseFieldName domain property code
		
		/// <summary>
		/// ReverseFieldName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReverseFieldNameDomainPropertyId = new global::System.Guid(0xc19ae98c, 0x5ce3, 0x4009, 0x89, 0x99, 0xd4, 0xf7, 0x0d, 0x9d, 0xc9, 0xb0);
		
		/// <summary>
		/// Storage for ReverseFieldName
		/// </summary>
		private global::System.String reverseFieldNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ReverseFieldName domain property.
		/// Description for Worm.Designer.EntityReferencesSelfTargetEntities.Reverse Field
		/// Name
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesSelfTargetEntities/ReverseFieldName.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesSelfTargetEntities/ReverseFieldName.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c19ae98c-5ce3-4009-8999-d4f70d9dc9b0")]
		public global::System.String ReverseFieldName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return reverseFieldNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReverseFieldNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesSelfTargetEntities.ReverseFieldName domain property.
		/// </summary>
		internal sealed partial class ReverseFieldNamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesSelfTargetEntities, global::System.String>
		{
			private ReverseFieldNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesSelfTargetEntities.ReverseFieldName domain property value handler.
			/// </summary>
			public static readonly ReverseFieldNamePropertyHandler Instance = new ReverseFieldNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesSelfTargetEntities.ReverseFieldName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReverseFieldNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityReferencesSelfTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.reverseFieldNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesSelfTargetEntities element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.reverseFieldNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReverseAccessor domain property code
		
		/// <summary>
		/// ReverseAccessor domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReverseAccessorDomainPropertyId = new global::System.Guid(0xecf05264, 0xd18b, 0x4531, 0xbc, 0x69, 0x5f, 0x9e, 0x58, 0xdd, 0xe5, 0x81);
		
		/// <summary>
		/// Storage for ReverseAccessor
		/// </summary>
		private global::System.String reverseAccessorPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ReverseAccessor domain property.
		/// Description for Worm.Designer.EntityReferencesSelfTargetEntities.Reverse
		/// Accessor
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesSelfTargetEntities/ReverseAccessor.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesSelfTargetEntities/ReverseAccessor.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ecf05264-d18b-4531-bc69-5f9e58dde581")]
		public global::System.String ReverseAccessor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return reverseAccessorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReverseAccessorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesSelfTargetEntities.ReverseAccessor domain property.
		/// </summary>
		internal sealed partial class ReverseAccessorPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesSelfTargetEntities, global::System.String>
		{
			private ReverseAccessorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesSelfTargetEntities.ReverseAccessor domain property value handler.
			/// </summary>
			public static readonly ReverseAccessorPropertyHandler Instance = new ReverseAccessorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesSelfTargetEntities.ReverseAccessor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReverseAccessorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityReferencesSelfTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.reverseAccessorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesSelfTargetEntities element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.reverseAccessorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReverseCascadeDelete domain property code
		
		/// <summary>
		/// ReverseCascadeDelete domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReverseCascadeDeleteDomainPropertyId = new global::System.Guid(0x3cd9c5c8, 0xee13, 0x40ca, 0x95, 0x47, 0xe5, 0x54, 0x59, 0x9c, 0xd6, 0x0f);
		
		/// <summary>
		/// Storage for ReverseCascadeDelete
		/// </summary>
		private global::System.Boolean reverseCascadeDeletePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ReverseCascadeDelete domain property.
		/// Description for Worm.Designer.EntityReferencesSelfTargetEntities.Reverse Cascade
		/// Delete
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesSelfTargetEntities/ReverseCascadeDelete.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesSelfTargetEntities/ReverseCascadeDelete.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3cd9c5c8-ee13-40ca-9547-e554599cd60f")]
		public global::System.Boolean ReverseCascadeDelete
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return reverseCascadeDeletePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReverseCascadeDeletePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesSelfTargetEntities.ReverseCascadeDelete domain property.
		/// </summary>
		internal sealed partial class ReverseCascadeDeletePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesSelfTargetEntities, global::System.Boolean>
		{
			private ReverseCascadeDeletePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesSelfTargetEntities.ReverseCascadeDelete domain property value handler.
			/// </summary>
			public static readonly ReverseCascadeDeletePropertyHandler Instance = new ReverseCascadeDeletePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesSelfTargetEntities.ReverseCascadeDelete domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReverseCascadeDeleteDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityReferencesSelfTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.reverseCascadeDeletePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesSelfTargetEntities element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.reverseCascadeDeletePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Table domain property code
		
		/// <summary>
		/// Table domain property Id.
		/// </summary>
		public static readonly global::System.Guid TableDomainPropertyId = new global::System.Guid(0x335d6f0d, 0x32b6, 0x44d4, 0xbd, 0xe2, 0x91, 0x4e, 0x05, 0x60, 0x71, 0xc5);
		
		/// <summary>
		/// Storage for Table
		/// </summary>
		private global::System.String tablePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Table domain property.
		/// Description for Worm.Designer.EntityReferencesSelfTargetEntities.Table
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesSelfTargetEntities/Table.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesSelfTargetEntities/Table.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("335d6f0d-32b6-44d4-bde2-914e056071c5")]
		public global::System.String Table
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesSelfTargetEntities.Table domain property.
		/// </summary>
		internal sealed partial class TablePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesSelfTargetEntities, global::System.String>
		{
			private TablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesSelfTargetEntities.Table domain property value handler.
			/// </summary>
			public static readonly TablePropertyHandler Instance = new TablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesSelfTargetEntities.Table domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityReferencesSelfTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tablePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesSelfTargetEntities element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region UnderlyingEntity domain property code
		
		/// <summary>
		/// UnderlyingEntity domain property Id.
		/// </summary>
		public static readonly global::System.Guid UnderlyingEntityDomainPropertyId = new global::System.Guid(0xf22b07ba, 0x7d2b, 0x483e, 0xbd, 0x82, 0xc7, 0x52, 0x07, 0xee, 0x64, 0x00);
		
		/// <summary>
		/// Storage for UnderlyingEntity
		/// </summary>
		private global::System.String underlyingEntityPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of UnderlyingEntity domain property.
		/// Description for Worm.Designer.EntityReferencesSelfTargetEntities.Underlying
		/// Entity
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesSelfTargetEntities/UnderlyingEntity.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesSelfTargetEntities/UnderlyingEntity.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f22b07ba-7d2b-483e-bd82-c75207ee6400")]
		public global::System.String UnderlyingEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return underlyingEntityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UnderlyingEntityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesSelfTargetEntities.UnderlyingEntity domain property.
		/// </summary>
		internal sealed partial class UnderlyingEntityPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesSelfTargetEntities, global::System.String>
		{
			private UnderlyingEntityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesSelfTargetEntities.UnderlyingEntity domain property value handler.
			/// </summary>
			public static readonly UnderlyingEntityPropertyHandler Instance = new UnderlyingEntityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesSelfTargetEntities.UnderlyingEntity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UnderlyingEntityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityReferencesSelfTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.underlyingEntityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesSelfTargetEntities element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.underlyingEntityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Disabled domain property code
		
		/// <summary>
		/// Disabled domain property Id.
		/// </summary>
		public static readonly global::System.Guid DisabledDomainPropertyId = new global::System.Guid(0xaeb95925, 0xaee5, 0x4c25, 0x99, 0x61, 0xf1, 0xbb, 0x58, 0xa0, 0x80, 0x40);
		
		/// <summary>
		/// Storage for Disabled
		/// </summary>
		private global::System.Boolean disabledPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Disabled domain property.
		/// Description for Worm.Designer.EntityReferencesSelfTargetEntities.Disabled
		/// </summary>
		[DslDesign::DisplayNameResource("Worm.Designer.EntityReferencesSelfTargetEntities/Disabled.DisplayName", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Worm.Designer.EntityReferencesSelfTargetEntities/Disabled.Description", typeof(global::Worm.Designer.DesignerDomainModel), "Worm.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("aeb95925-aee5-4c25-9961-f1bb58a08040")]
		public global::System.Boolean Disabled
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return disabledPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DisabledPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityReferencesSelfTargetEntities.Disabled domain property.
		/// </summary>
		internal sealed partial class DisabledPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityReferencesSelfTargetEntities, global::System.Boolean>
		{
			private DisabledPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityReferencesSelfTargetEntities.Disabled domain property value handler.
			/// </summary>
			public static readonly DisabledPropertyHandler Instance = new DisabledPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityReferencesSelfTargetEntities.Disabled domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DisabledDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityReferencesSelfTargetEntities element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.disabledPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityReferencesSelfTargetEntities element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.disabledPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SelfSourceEntity link accessor
		/// <summary>
		/// Get the list of EntityReferencesSelfTargetEntities links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Worm.Designer.EntityReferencesSelfTargetEntities> GetLinksToSelfTargetEntities ( global::Worm.Designer.Entity selfSourceEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityReferencesSelfTargetEntities>(selfSourceEntityInstance, global::Worm.Designer.EntityReferencesSelfTargetEntities.SelfSourceEntityDomainRoleId);
		}
		#endregion
		#region SelfTargetEntity link accessor
		/// <summary>
		/// Get the list of EntityReferencesSelfTargetEntities links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Worm.Designer.EntityReferencesSelfTargetEntities> GetLinksToSelfSourceEntities ( global::Worm.Designer.Entity selfTargetEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityReferencesSelfTargetEntities>(selfTargetEntityInstance, global::Worm.Designer.EntityReferencesSelfTargetEntities.SelfTargetEntityDomainRoleId);
		}
		#endregion
		#region EntityReferencesSelfTargetEntities instance accessors
		
		/// <summary>
		/// Get any EntityReferencesSelfTargetEntities links between a given Entity and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Worm.Designer.EntityReferencesSelfTargetEntities> GetLinks( global::Worm.Designer.Entity source, global::Worm.Designer.Entity target )
		{
			global::System.Collections.Generic.List<global::Worm.Designer.EntityReferencesSelfTargetEntities> outLinks = new global::System.Collections.Generic.List<global::Worm.Designer.EntityReferencesSelfTargetEntities>();
			global::System.Collections.Generic.IList<global::Worm.Designer.EntityReferencesSelfTargetEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityReferencesSelfTargetEntities>(source, global::Worm.Designer.EntityReferencesSelfTargetEntities.SelfSourceEntityDomainRoleId);
			foreach ( global::Worm.Designer.EntityReferencesSelfTargetEntities link in links )
			{
				if ( target.Equals(link.SelfTargetEntity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityReferencesSelfTargetEntities link between a given Entityand a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Worm.Designer.EntityReferencesSelfTargetEntities GetLink( global::Worm.Designer.Entity source, global::Worm.Designer.Entity target )
		{
			global::System.Collections.Generic.IList<global::Worm.Designer.EntityReferencesSelfTargetEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Worm.Designer.EntityReferencesSelfTargetEntities>(source, global::Worm.Designer.EntityReferencesSelfTargetEntities.SelfSourceEntityDomainRoleId);
			foreach ( global::Worm.Designer.EntityReferencesSelfTargetEntities link in links )
			{
				if ( target.Equals(link.SelfTargetEntity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
